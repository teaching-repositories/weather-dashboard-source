---
title: "JSON in Python: A Quick Reference"
subtitle: Efficiently Convert, Parse, and Manipulate JSON Data with Python
author: "Michael Borck"
format:
  pdf:
    toc: false
    number-sections: false
    colorlinks: true
    encoding: "UTF-8"
  docx:
    toc: false
    number-sections: false
    highlight-style: github
  html:
    toc: true
    toc-expand: 2
    embed-resources: true
---

## Introduction

Working with JSON (JavaScript Object Notation) data in Python is a crucial skill for any developer. JSON is a lightweight, human-readable data format that is widely used for data exchange between web servers, web applications, and mobile apps. In Python, the `json` module provides a simple and efficient way to work with JSON data. Whether you're building a web scraper, a data analysis tool, or a web application, understanding how to work with JSON in Python is essential.

This quick reference guide provides a quick reference guide to the most commonly used functions and methods for working with JSON data in Python. From converting Python objects to JSON and parsing JSON data, to handling errors and best practices, this quick reference guide covers it all. Whether you're a beginner or an experienced developer, this quick reference guide will help you master the basics of working with JSON in Python.



## JSON Basics

* JSON stands for JavaScript Object Notation
* It's a lightweight data interchange format
* It's easy to read and write, and is widely supported

## Creating JSON Data

* Use the `json` module: `import json`
* Convert a Python object to JSON: `json.dumps(obj)`
* Example: `json.dumps({'name': 'John', 'age': 30})`

## Parsing JSON Data

* Use the `json` module: `import json`
* Convert JSON to a Python object: `json.loads(json_string)`
* Example: `json.loads('{"name": "John", "age": 30}')`

## Working with JSON Data

* Convert a Python dictionary to JSON: `json.dumps({'name': 'John', 'age': 30})`
* Convert JSON to a Python dictionary: `json.loads('{"name": "John", "age": 30}')`
* Use the `json.load()` function to load JSON from a file: `with open('data.json') as f: json.load(f)`
* Use the `json.dump()` function to dump a Python object to a file: `with open('data.json', 'w') as f: json.dump({'name': 'John', 'age': 30}, f)`

## Error Handling

* Use the `json.JSONDecodeError` exception to catch errors when parsing JSON: `try: json.loads(json_string) except json.JSONDecodeError: print("Invalid JSON")`
* Use the `json.JSONEncodeError` exception to catch errors when encoding JSON: `try: json.dumps(obj) except json.JSONEncodeError: print("Invalid object")`

## Best Practices

* Use the `json` module to work with JSON data
* Use the `dumps()` function to convert a Python object to JSON
* Use the `loads()` function to convert JSON to a Python object
* Use the `load()` and `dump()` functions to work with JSON files
* Use try-except blocks to handle errors when working with JSON data
