---
title: "Python Input Validation quick reference guide"
subtitle: "Ensure Data Integrity with These Essential Validation Techniques"
author: "Michael Borck"
format:
  pdf:
    toc: false
    number-sections: false
    colorlinks: true
    encoding: "UTF-8"
  docx:
    toc: false
    number-sections: false
    highlight-style: github
  html:
    toc: true
    toc-expand: 2
    embed-resources: true
---

## Introduction

Validating user input is a crucial step in building robust and secure software applications. In Python, validating user input can help prevent common web application security vulnerabilities such as SQL injection and cross-site scripting (XSS). This quick reference guide provides a quick reference guide to the most commonly used input validation techniques in Python.

## Why Validate User Input?

Validating user input is essential for several reasons:

* **Prevent Security Vulnerabilities**: Validating user input can help prevent common web application security vulnerabilities such as SQL injection and cross-site scripting (XSS).
* **Ensure Data Integrity**: Validating user input ensures that the data entered by users is accurate and consistent, reducing the risk of errors and inconsistencies.
* **Improve User Experience**: Validating user input can improve the user experience by providing immediate feedback to users about invalid input, reducing the likelihood of errors and frustration.

## What's in this quick reference guide?

This quick reference guide provides a comprehensive guide to input validation in Python, covering:

* String validation techniques
* Integer and float validation techniques
* Boolean validation techniques
* Email and phone number validation techniques
* Date and password validation techniques
* Regular expressions for advanced input validation

This quick reference guide provides the essential knowledge you need to validate user input effectively and securely in Python.

## String Validation

* `str.isalpha()`: Returns `True` if the string contains only letters.
* `str.isalnum()`: Returns `True` if the string contains only letters and numbers.
* `str.isdigit()`: Returns `True` if the string contains only digits.
* `str.islower()`: Returns `True` if the string contains only lowercase letters.
* `str.isupper()`: Returns `True` if the string contains only uppercase letters.
* `str.strip()`: Removes leading and trailing whitespace from the string.
* `str.replace()`: Replaces a specified phrase with another string.

## Integer Validation

* `int.isdigit()`: Returns `True` if the string contains only digits.
* `int.isnumeric()`: Returns `True` if the string contains only digits and is a valid integer.
* `int(int_value)`: Converts a string to an integer.

## Float Validation

* `float.isdigit()`: Returns `True` if the string contains only digits.
* `float.isnumeric()`: Returns `True` if the string contains only digits and is a valid float.
* `float(float_value)`: Converts a string to a float.

## Boolean Validation

* `bool(bool_value)`: Converts a string to a boolean value.

## Email Validation

* `re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", email)`: Regular expression to validate an email address.

## Phone Number Validation

* `re.match(r"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$", phone_number)`: Regular expression to validate a phone number.

## Date Validation

* `datetime.datetime.strptime(date_string, "%Y-%m-%d")`: Converts a string to a datetime object.

## Password Validation

* `re.match(r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!#%*?&]{8,20}$", password)`: Regular expression to validate a password.

Regular expressions can be confusing for beginners. Here's an alternative using the `pyinputplus` library, which provides a simpler way to validate user input:

## Install pyinputplus

You can install `pyinputplus` using pip:
```
pip install pyinputplus
```
## Validate User Input using pyinputplus

Here's an example of how to use `pyinputplus` to validate user input:
```python
import pyinputplus as p

# Get user input
username = p.inputStr("Enter your username: ")

# Validate username
if not username.isalnum():
    print("Invalid username. Please enter a valid username.")
else:
    print("Valid username!")
```
In this example, `pyinputplus` provides a simple way to get user input using the `inputStr()` function. The `isalnum()` method is used to validate the username, which checks if the input contains only alphanumeric characters.

## Alternative to Regular Expressions

Here's an example of how to use `pyinputplus` to validate an email address:
```python
import pyinputplus as p

# Get user input
email = p.inputStr("Enter your email address: ")

# Validate email
if "@" in email and "." in email:
    print("Valid email!")
else:
    print("Invalid email. Please enter a valid email address.")
```
In this example, `pyinputplus` provides a simple way to validate an email address by checking if the input contains an `@` symbol and a dot (`.`).

## Advantages of pyinputplus

* Simplifies input validation: `pyinputplus` provides a simple way to validate user input, making it easier for beginners to validate user input.
* Reduces the need for regular expressions: `pyinputplus` provides a simpler way to validate input, reducing the need for complex regular expressions.
* Provides a more intuitive API: `pyinputplus` provides a more intuitive API, making it easier for beginners to use.

Keep in mind that `pyinputplus` is a simple library, and it's not suitable for complex input validation. For more complex validation, you may still need to use regular expressions.

## Common Validation Functions

* `str.strip()`: Removes leading and trailing whitespace from a string.
* `str.replace()`: Replaces a specified phrase with another string.

You can use these methods to validate user input and ensure that it meets certain criteria. For example, you can use `str.isalpha()` to check if a string contains only letters, or `int.isdigit()` to check if a string contains only digits.

Remember to always validate user input to prevent common web application security vulnerabilities like SQL injection and cross-site scripting (XSS).
