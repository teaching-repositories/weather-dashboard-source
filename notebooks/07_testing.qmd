---
title: "WeatherVista Project - Session 7: Writing and Running Tests with pytest and doctest"
execute: 
  enabled: false
---

## Objectives
- Learn the importance of testing in software development.
- Understand how to write and run tests using pytest.
- Explore using doctest for inline testing within docstrings.

## 1. Introduction to Testing
Testing is crucial for ensuring the reliability and correctness of your code. In this session, we will focus on writing tests using pytest and doctest.

### Import Required Libraries
```python
import pytest
import requests
import pandas as pd
```

## 2. Writing Tests with pytest
pytest is a popular testing framework for Python that makes it easy to write simple and scalable test cases.

### Installing pytest
```python
!pip install pytest
```

### Creating a Test File
We'll create a test file `test_weather.py` to write our test cases.

### test_weather.py
```python
# test_weather.py
import pytest
from scripts.fetch_data import fetch_weather_data

def test_fetch_weather_data_success():
    api_key = 'your_api_key_here'
    location = 'London'
    data = fetch_weather_data(api_key, location)
    assert data is not None
    assert 'Location' in data
    assert 'Temperature (C)' in data
    assert 'Humidity (%)' in data
    assert 'Weather' in data

def test_fetch_weather_data_failure():
    api_key = 'your_api_key_here'
    location = 'InvalidCity'
    data = fetch_weather_data(api_key, location)
    assert data is None
```

### Running Tests with pytest
To run the tests, navigate to the directory containing the test file and run:
```python
!pytest test_weather.py
```

## 3. Using doctest for Inline Testing
doctest allows you to write tests within your docstrings, which can be run to verify that your code works as expected.

### Adding doctests to Functions
We'll add doctests to the `fetch_weather_data` function in `fetch_data.py`.

### fetch_data.py
```python
def fetch_weather_data(api_key, location):
    """
    Fetch weather data from the OpenWeatherMap API.
    
    Args:
    - api_key (str): The API key for authentication.
    - location (str): The location for which to fetch weather data.
    
    Returns:
    - dict: A dictionary containing weather data.
    
    Examples:
    >>> fetch_weather_data('invalid_api_key', 'London') is None
    True
    """
    url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        weather_info = {
            "Location": data["name"],
            "Temperature (C)": data["main"]["temp"] - 273.15,
            "Humidity (%)": data["main"]["humidity"],
            "Weather": data["weather"][0]["description"]
        }
        return weather_info
    else:
        return None
```

### Running doctests
To run doctests, use the following command:
```python
!python -m doctest -v scripts/fetch_data.py
```

## 4. Testing Data Processing Functions
We should also test our data processing functions to ensure they work correctly.

### Adding Tests for Data Processing
We'll add tests for data processing functions in a new test file `test_process_data.py`.

### test_process_data.py
```python
# test_process_data.py
import pytest
from scripts.process_data import convert_temp_kelvin_to_celsius

def test_convert_temp_kelvin_to_celsius():
    assert convert_temp_kelvin_to_celsius(273.15) == 0
    assert convert_temp_kelvin_to_celsius(0) == -273.15
    assert convert_temp_kelvin_to_celsius(373.15) == 100
```

### Running Tests
To run the tests, navigate to the directory containing the test files and run:
```python
!pytest test_process_data.py
```

## 5. Integrating Tests into the Project
Ensure that all your tests are organized and can be run together.

### Running All Tests
To run all tests in the project, use:
```python
!pytest
```

## Homework
- Add more test cases to cover edge cases and different scenarios.
- Explore using other testing frameworks and tools to enhance your testing strategy.

## Summary
In this session, we learned the importance of testing and how to write and run tests using pytest and doctest. We added tests for our weather fetching and data processing functions to ensure their correctness and reliability.

Next session, we will focus on finalizing the project, adding documentation, and discussing distribution methods.
