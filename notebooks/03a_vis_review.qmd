### Worksheet: Understanding and Modifying Weather Forecast Card Code

#### Task
Read and understand the provided Python code. Then, modify the code so that the minimum and maximum temperature values are displayed to two decimal places.

### Section 1: Load the Data

The script loads daily weather data from a CSV file into a DataFrame. The 'Date' column is converted to datetime format.

```python
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import random

# Load the data
file_path = '/mnt/data/daily_weather_stats.csv'
df = pd.read_csv(file_path)
df['Date'] = pd.to_datetime(df['Date'])
```

### Section 2: Determine Weather Condition

This function determines the weather condition based on the temperature and humidity values for each day.

- The weather is 'Sunny' if the maximum temperature is above 25째C.
- The weather is 'Rainy' if the minimum temperature is below 15째C and the maximum humidity is above 80%.
- The weather is 'Partly Cloudy' for other conditions.

A new 'Weather' column is added to the DataFrame with the weather conditions.

```python
def determine_weather(row):
    if row['Max Temperature (C)'] > 25:
        return 'Sunny'
    elif row['Min Temperature (C)'] < 15 and row['Max Humidity (%)'] > 80:
        return 'Rainy'
    else:
        return 'Partly Cloudy'

# Add a 'Weather' column to the dataframe
df['Weather'] = df.apply(determine_weather, axis=1)
```

### Section 3: Function to Create a Single Forecast Card

This function creates a forecast card for a given date, high temperature, low temperature, and weather condition.

- The background color of the card is set based on the weather condition using a rectangle patch.
- The function hides the axis, displays the date, high and low temperatures, and weather condition as text on the card.

```python
def create_forecast_card(ax, date, high_temp, low_temp, weather):
    # Background color based on weather
    if weather == 'Sunny':
        bg_color = 'gold'
    elif weather == 'Partly Cloudy':
        bg_color = 'lightgrey'
    elif weather == 'Rainy':
        bg_color = 'lightblue'
    
    # Create a rectangle patch for the background color
    rect = patches.Rectangle((0, 0), 1, 1, transform=ax.transAxes, color=bg_color, zorder=0)
    ax.add_patch(rect)

    ax.axis('off')  # Hide axes

    # Display date
    ax.text(0.5, 0.8, date.strftime('%Y-%m-%d'), fontsize=12, ha='center', va='center')

    # Display high temperature
    ax.text(0.5, 0.6, f'High: {high_temp:.2f}째C', fontsize=10, ha='center', va='center', color='red')

    # Display low temperature
    ax.text(0.5, 0.4, f'Low: {low_temp:.2f}째C', fontsize=10, ha='center', va='center', color='blue')

    # Display weather condition
    ax.text(0.5, 0.2, weather, fontsize=10, ha='center', va='center')
```

### Section 4: Display a Single Forecast Card

A random row from the DataFrame is selected to display the forecast card.

```python
# Select a random row from the dataframe
random_row = df.sample(n=1).iloc[0]

# Create a plot for the forecast card
fig, ax = plt.subplots(figsize=(3, 4))

create_forecast_card(ax, random_row['Date'], random_row['Max Temperature (C)'], random_row['Min Temperature (C)'], random_row['Weather'])

plt.tight_layout()
plt.show()
```

#### Task

Modify the code so that the minimum and maximum temperature values are displayed to two decimal places.

#### Hint
To format numbers to two decimal places in Python, you can use string formatting. For example:
```python
formatted_number = f"{number:.2f}"
```
Use this hint to modify the relevant part of the code to ensure the temperature values are displayed with two decimal places.

---

**Submit your modified code and a brief explanation of the changes you made.**