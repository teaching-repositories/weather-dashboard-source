---
title: "WeatherVista Project - Session 4: Advanced Data Visualization with Subplots and Grids"
execute: 
  enabled: false
---

## Objectives
- Learn how to create advanced visualizations using subplots and grids.
- Understand how to combine multiple plots into a single figure.
- Customize the layout and presentation of complex visualizations.

## 1. Introduction to Advanced Visualization
Advanced visualizations can provide more insights by combining multiple plots into a single figure, allowing for easier comparison and analysis.

### Import Required Libraries
```python
import pandas as pd
import matplotlib.pyplot as plt
```

## 2. Reading Data
We'll start by reading the processed weather data from the CSV file.

```python
df = pd.read_csv('data/processed/processed_weather_data.csv')
df
```

## 3. Creating Subplots
Subplots allow us to create multiple plots within a single figure.

### Creating a 2x2 Grid of Plots
We'll create a 2x2 grid of plots to visualize different aspects of the weather data.

```python
fig, axs = plt.subplots(2, 2, figsize=(14, 10))

# Line plot for Temperature
axs[0, 0].plot(df['Location'], df['Temperature (C)'], marker='o')
axs[0, 0].set_title('Temperature by Location')
axs[0, 0].set_xlabel('Location')
axs[0, 0].set_ylabel('Temperature (°C)')
axs[0, 0].tick_params(axis='x', rotation=45)

# Bar plot for Humidity
axs[0, 1].bar(df['Location'], df['Humidity (%)'], color='skyblue')
axs[0, 1].set_title('Humidity by Location')
axs[0, 1].set_xlabel('Location')
axs[0, 1].set_ylabel('Humidity (%)')
axs[0, 1].tick_params(axis='x', rotation=45)

# Pie chart for Weather Description
weather_counts = df['Weather'].value_counts()
axs[1, 0].pie(weather_counts, labels=weather_counts.index, autopct='%1.1f%%', startangle=140)
axs[1, 0].set_title('Weather Description Distribution')
axs[1, 0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

# Scatter plot for Temperature vs. Humidity
axs[1, 1].scatter(df['Temperature (C)'], df['Humidity (%)'], color='r')
axs[1, 1].set_title('Temperature vs. Humidity')
axs[1, 1].set_xlabel('Temperature (°C)')
axs[1, 1].set_ylabel('Humidity (%)')

# Adjust layout
plt.tight_layout()
plt.show()
```

## 4. Customizing Subplots
Customizing subplots can improve the readability and presentation of the visualizations.

### Adding Annotations and Customizing Styles
We'll add annotations to highlight specific data points and customize the styles of the subplots.

```python
fig, axs = plt.subplots(2, 2, figsize=(14, 10))

# Line plot for Temperature
axs[0, 0].plot(df['Location'], df['Temperature (C)'], marker='o', linestyle='--', color='b')
axs[0, 0].set_title('Temperature by Location', fontsize=12, fontweight='bold')
axs[0, 0].set_xlabel('Location')
axs[0, 0].set_ylabel('Temperature (°C)')
axs[0, 0].tick_params(axis='x', rotation=45)
max_temp = df['Temperature (C)'].max()
max_temp_location = df.loc[df['Temperature (C)'] == max_temp, 'Location'].iloc[0]
axs[0, 0].annotate(f'Max Temp: {max_temp:.2f}°C', xy=(max_temp_location, max_temp), 
                   xytext=(max_temp_location, max_temp+2), 
                   arrowprops=dict(facecolor='black', shrink=0.05))

# Bar plot for Humidity
axs[0, 1].bar(df['Location'], df['Humidity (%)'], color='skyblue')
axs[0, 1].set_title('Humidity by Location', fontsize=12, fontweight='bold')
axs[0, 1].set_xlabel('Location')
axs[0, 1].set_ylabel('Humidity (%)')
axs[0, 1].tick_params(axis='x', rotation=45)

# Pie chart for Weather Description
weather_counts = df['Weather'].value_counts()
axs[1, 0].pie(weather_counts, labels=weather_counts.index, autopct='%1.1f%%', startangle=140)
axs[1, 0].set_title('Weather Description Distribution', fontsize=12, fontweight='bold')
axs[1, 0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

# Scatter plot for Temperature vs. Humidity
axs[1, 1].scatter(df['Temperature (C)'], df['Humidity (%)'], color='r')
axs[1, 1].set_title('Temperature vs. Humidity', fontsize=12, fontweight='bold')
axs[1, 1].set_xlabel('Temperature (°C)')
axs[1, 1].set_ylabel('Humidity (%)')

# Adjust layout
plt.tight_layout()
plt.show()
```

## 5. Combining Different Types of Plots
Combining different types of plots can provide a more comprehensive view of the data.

### Example: Combining Line Plot and Bar Plot
We'll combine a line plot and a bar plot in a single figure.

```python
fig, ax1 = plt.subplots(figsize=(12, 6))

# Line plot for Temperature
ax1.plot(df['Location'], df['Temperature (C)'], color='b', marker='o', label='Temperature (°C)')
ax1.set_xlabel('Location')
ax1.set_ylabel('Temperature (°C)', color='b')
ax1.tick_params(axis='x', rotation=45)
ax1.tick_params(axis='y', labelcolor='b')

# Bar plot for Humidity
ax2 = ax1.twinx()
ax2.bar(df['Location'], df['Humidity (%)'], alpha=0.6, color='g', label='Humidity (%)')
ax2.set_ylabel('Humidity (%)', color='g')
ax2.tick_params(axis='y', labelcolor='g')

# Adding legends
fig.legend(loc='upper right', bbox_to_anchor=(0.9, 0.9))

# Adding title
plt.title('Temperature and Humidity by Location')

# Adjust layout
plt.tight_layout()
plt.show()
```

## Homework
- Create additional subplots to visualize other aspects of the weather data (e.g., wind speed, pressure).
- Experiment with different types of combined plots to enhance the visualizations.

## Summary
In this session, we learned how to create advanced data visualizations using subplots and grids. We combined multiple plots into a single figure and customized the layout and presentation to improve readability and presentation.

Next session, we will focus on web scraping and using additional APIs to gather more weather-related data.
