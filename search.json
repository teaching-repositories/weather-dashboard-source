[
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nDebugging Adventures: The Quest for Bug-Free Code\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nReady, Set, Deploy: Share Your Python Magic\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Handling Adventures: CSV and SQL Edition\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Magic: Visualizing Weather Data with Matplotlib\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode Warriors: The Art of Testing\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI Adventures: Conquering OpenWeatherMap\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeather Dashboards: From Notebooks to GUIs\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidpoint Review: Strengthening Our Python Foundations\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Web Scraping and APIs in Python\n\n\n18 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocumenting Your Python Project: A Beginner’s Guide\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Prototyping to Production: Converting Jupyter Notebooks to Python Scripts\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Perfection: Mastering Matplotlib Dashboards\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "quick-reference-guides.html",
    "href": "quick-reference-guides.html",
    "title": "Quick Reference Guides",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nA Guide to the OpenWeatherMap API\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI Key Security: Protecting Your Credentials\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nException Handling in Python: A Comprehensive Guide\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit and GitHub Cheat Sheet: Essential Commands and Concepts\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON in Python: A Quick Reference\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics Cheat Sheet\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Input Validation quick reference guide\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Project Starter Kit\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nTkinter Treasures: Your Path to Stunning Python Interfaces\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeather Dashboard Project Setup Guide\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeather Dashboard Project: WeatherVista (天气景观 - Tiānqì jǐngguān)\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWidget Wisardry: Enhancing Jupyter Notebooks with ipywidgets\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/07_testing.html",
    "href": "notebooks/07_testing.html",
    "title": "WeatherVista Project - Session 7: Writing and Running Tests with doctest",
    "section": "",
    "text": "Learn the importance of testing in software development.\nExplore using doctest for inline testing within docstrings."
  },
  {
    "objectID": "notebooks/07_testing.html#objectives",
    "href": "notebooks/07_testing.html#objectives",
    "title": "WeatherVista Project - Session 7: Writing and Running Tests with doctest",
    "section": "",
    "text": "Learn the importance of testing in software development.\nExplore using doctest for inline testing within docstrings."
  },
  {
    "objectID": "notebooks/07_testing.html#introduction-to-testing",
    "href": "notebooks/07_testing.html#introduction-to-testing",
    "title": "WeatherVista Project - Session 7: Writing and Running Tests with doctest",
    "section": "1. Introduction to Testing",
    "text": "1. Introduction to Testing\nTesting is crucial for ensuring the reliability and correctness of your code. In this session, we will focus on writing tests using doctest."
  },
  {
    "objectID": "notebooks/07_testing.html#using-doctest-for-inline-testing",
    "href": "notebooks/07_testing.html#using-doctest-for-inline-testing",
    "title": "WeatherVista Project - Session 7: Writing and Running Tests with doctest",
    "section": "2. Using doctest for Inline Testing",
    "text": "2. Using doctest for Inline Testing\n\nExample Function: convert_temp_kelvin_to_celsius\nLet’s start with a simple weather-related function and add a doctest to it.\n\ndef convert_temp_kelvin_to_celsius(kelvin):\n    \"\"\"\n    Convert temperature from Kelvin to Celsius.\n\n    Args:\n    - kelvin (float): Temperature in Kelvin.\n\n    Returns:\n    - float: Temperature in Celsius.\n\n    Examples:\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(273.15)\n    0.0\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(0)\n    -273.15\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(373.15)\n    100.0\n    \"\"\"\n    return kelvin - 273.15\n\n\n\nRunning doctest for convert_temp_kelvin_to_celsius\nTo run doctest within the Jupyter notebook, you can use the doctest module directly.\nNote: The doctest.testmod() function will only test the functions that have been defined in cells that have already been executed. It does not scan the entire notebook; it only tests the functions and classes that are available in the current Python environment at the time it is called.\n\nimport doctest\n\ndoctest.testmod()\n\n\n\nMore Complex Function: fetch_weather_data\nNow let’s add another function that fetches weather data and includes a doctest.\n\nimport requests\n\ndef fetch_weather_data(api_key, location):\n    \"\"\"\n    Fetch weather data from the OpenWeatherMap API.\n\n    Args:\n    - api_key (str): The API key for authentication.\n    - location (str): The location for which to fetch weather data.\n\n    Returns:\n    - dict: A dictionary containing weather data.\n\n    Examples:\n    &gt;&gt;&gt; fetch_weather_data('invalid_api_key', 'London') is None\n    True\n    &gt;&gt;&gt; data = fetch_weather_data('your_api_key_here', 'London')\n    &gt;&gt;&gt; data['Location'] == 'London'\n    True\n    \"\"\"\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        weather_info = {\n            \"Location\": data[\"name\"],\n            \"Temperature (C)\": data[\"main\"][\"temp\"] - 273.15,\n            \"Humidity (%)\": data[\"main\"][\"humidity\"],\n            \"Weather\": data[\"weather\"][0][\"description\"]\n        }\n        return weather_info\n    else:\n        return None\n\n\n\nRunning doctest for fetch_weather_data\nAgain, ensure the function is defined in a previously executed cell before running doctest.testmod().\n\nimport doctest\n\ndoctest.testmod()\n\n\n\n3. Adding doctests to WeatherVista Functions\nAdd doctest to our functions in the scripts directory.\n\n\nscripts/fetch_data.py\ndef fetch_weather_data(api_key, location):\n    \"\"\"\n    Fetch weather data from the OpenWeatherMap API.\n\n    Args:\n    - api_key (str): The API key for authentication.\n    - location (str): The location for which to fetch weather data.\n\n    Returns:\n    - dict: A dictionary containing weather data.\n\n    Examples:\n    &gt;&gt;&gt; fetch_weather_data('invalid_api_key', 'London') is None\n    True\n    \"\"\"\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        weather_info = {\n            \"Location\": data[\"name\"],\n            \"Temperature (C)\": data[\"main\"][\"temp\"] - 273.15,\n            \"Humidity (%)\": data[\"main\"][\"humidity\"],\n            \"Weather\": data[\"weather\"][0][\"description\"]\n        }\n        return weather_info\n    else:\n        return None\n\n\nRunning doctest for WeatherVista\nTo run doctest for this function, at the command line:\npython -m doctest -v scripts/fetch_data.py\n\n\nscripts/process_data.py\ndef convert_temp_kelvin_to_celsius(kelvin):\n    \"\"\"\n    Convert temperature from Kelvin to Celsius.\n\n    Args:\n    - kelvin (float): Temperature in Kelvin.\n\n    Returns:\n    - float: Temperature in Celsius.\n\n    Examples:\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(273.15)\n    0.0\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(0)\n    -273.15\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(373.15)\n    100.0\n    \"\"\"\n    return kelvin - 273.15\n\n\nRunning doctest for Data Processing Functions\nTo run doctest for this function:\npython -m doctest -v scripts/process_data.py\n\n\n4. Integrating Tests into the Project\nCreate a script to run all doctests in the project.\n\n\nrun_doctests.py\nimport doctest\nimport scripts.fetch_data\nimport scripts.process_data\n\ndef run_all_doctests():\n    doctest.testmod(scripts.fetch_data)\n    doctest.testmod(scripts.process_data)\n\nif __name__ == \"__main__\":\n    run_all_doctests()\n\n\nRunning All doctests\nTo run all doctests in the project:\npython run_doctests.py"
  },
  {
    "objectID": "notebooks/07_testing.html#homework",
    "href": "notebooks/07_testing.html#homework",
    "title": "WeatherVista Project - Session 7: Writing and Running Tests with doctest",
    "section": "Homework",
    "text": "Homework\n\nAdd more doctest cases to cover edge cases and different scenarios.\nExplore using other testing frameworks and tools to enhance your testing strategy."
  },
  {
    "objectID": "notebooks/07_testing.html#summary",
    "href": "notebooks/07_testing.html#summary",
    "title": "WeatherVista Project - Session 7: Writing and Running Tests with doctest",
    "section": "Summary",
    "text": "Summary\nIn this session, we learned the importance of testing and how to write and run tests using doctest. We added tests for our weather fetching and data processing functions to ensure their correctness and reliability.\nNext session, we will focus on finalising the project, adding documentation, and discussing distribution methods."
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html",
    "href": "notebooks/06b_dashboard_gui.html",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "",
    "text": "Learn how to create a graphical user interface (GUI) for the WeatherVista project.\nUnderstand the basics of Tkinter for building desktop applications.\nExplore using Tkinter Widgets for interactive elements in a GUI."
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html#objectives",
    "href": "notebooks/06b_dashboard_gui.html#objectives",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "",
    "text": "Learn how to create a graphical user interface (GUI) for the WeatherVista project.\nUnderstand the basics of Tkinter for building desktop applications.\nExplore using Tkinter Widgets for interactive elements in a GUI."
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html#introduction-to-tkinter",
    "href": "notebooks/06b_dashboard_gui.html#introduction-to-tkinter",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "1. Introduction to Tkinter",
    "text": "1. Introduction to Tkinter\nTkinter is a standard Python library for creating desktop GUIs. It provides various widgets to build interactive applications.\n\nImport Required Libraries\n\nimport tkinter as tk\nfrom tkinter import ttk\nimport pandas as pd"
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html#creating-a-basic-tkinter-window",
    "href": "notebooks/06b_dashboard_gui.html#creating-a-basic-tkinter-window",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "2. Creating a Basic Tkinter Window",
    "text": "2. Creating a Basic Tkinter Window\nWe’ll start by creating a basic Tkinter window.\n\ndef create_window():\n    window = tk.Tk()\n    window.title(\"WeatherVista Dashboard\")\n    window.geometry(\"600x400\")\n    \n    # Add a label\n    label = ttk.Label(window, text=\"WeatherVista Dashboard\", font=(\"Arial\", 16))\n    label.pack(pady=20)\n    \n    window.mainloop()\n\ncreate_window()"
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html#adding-widgets-to-the-tkinter-window",
    "href": "notebooks/06b_dashboard_gui.html#adding-widgets-to-the-tkinter-window",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "3. Adding Widgets to the Tkinter Window",
    "text": "3. Adding Widgets to the Tkinter Window\nWe’ll add various widgets such as labels, buttons, and entry fields to the Tkinter window.\n\nAdding Entry Fields and Buttons\n\ndef create_window():\n    def fetch_weather():\n        location = location_entry.get()\n        # Fetch and display weather data for the entered location\n        # This is a placeholder function, replace with actual data fetching logic\n        weather_data_label.config(text=f\"Weather data for {location}\")\n\n    window = tk.Tk()\n    window.title(\"WeatherVista Dashboard\")\n    window.geometry(\"600x400\")\n    \n    # Add a label\n    label = ttk.Label(window, text=\"WeatherVista Dashboard\", font=(\"Arial\", 16))\n    label.pack(pady=20)\n    \n    # Add entry field for location\n    location_label = ttk.Label(window, text=\"Enter Location:\")\n    location_label.pack(pady=5)\n    location_entry = ttk.Entry(window)\n    location_entry.pack(pady=5)\n    \n    # Add a button to fetch weather data\n    fetch_button = ttk.Button(window, text=\"Fetch Weather\", command=fetch_weather)\n    fetch_button.pack(pady=10)\n    \n    # Add a label to display weather data\n    weather_data_label = ttk.Label(window, text=\"\", font=(\"Arial\", 12))\n    weather_data_label.pack(pady=20)\n    \n    window.mainloop()\n\ncreate_window()"
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html#displaying-data-in-tkinter",
    "href": "notebooks/06b_dashboard_gui.html#displaying-data-in-tkinter",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "4. Displaying Data in Tkinter",
    "text": "4. Displaying Data in Tkinter\nWe’ll fetch and display weather data in the Tkinter window.\n\nFetching and Displaying Weather Data\n\nimport requests\n\ndef fetch_weather_data(api_key, location):\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        weather_info = {\n            \"Location\": data[\"name\"],\n            \"Temperature (C)\": data[\"main\"][\"temp\"] - 273.15,\n            \"Humidity (%)\": data[\"main\"][\"humidity\"],\n            \"Weather\": data[\"weather\"][0][\"description\"]\n        }\n        return weather_info\n    else:\n        return None\n\ndef create_window():\n    def fetch_weather():\n        location = location_entry.get()\n        weather_data = fetch_weather_data(api_key, location)\n        if weather_data:\n            weather_info = f\"Location: {weather_data['Location']}\\n\"\n            weather_info += f\"Temperature: {weather_data['Temperature (C)']:.2f} °C\\n\"\n            weather_info += f\"Humidity: {weather_data['Humidity (%)']}%\\n\"\n            weather_info += f\"Weather: {weather_data['Weather']}\"\n            weather_data_label.config(text=weather_info)\n        else:\n            weather_data_label.config(text=\"Failed to fetch data\")\n\n    window = tk.Tk()\n    window.title(\"WeatherVista Dashboard\")\n    window.geometry(\"600x400\")\n    \n    api_key = 'your_api_key_here'\n    \n    # Add a label\n    label = ttk.Label(window, text=\"WeatherVista Dashboard\", font=(\"Arial\", 16))\n    label.pack(pady=20)\n    \n    # Add entry field for location\n    location_label = ttk.Label(window, text=\"Enter Location:\")\n    location_label.pack(pady=5)\n    location_entry = ttk.Entry(window)\n    location_entry.pack(pady=5)\n    \n    # Add a button to fetch weather data\n    fetch_button = ttk.Button(window, text=\"Fetch Weather\", command=fetch_weather)\n    fetch_button.pack(pady=10)\n    \n    # Add a label to display weather data\n    weather_data_label = ttk.Label(window, text=\"\", font=(\"Arial\", 12))\n    weather_data_label.pack(pady=20)\n    \n    window.mainloop()\n\ncreate_window()"
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html#homework",
    "href": "notebooks/06b_dashboard_gui.html#homework",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "Homework",
    "text": "Homework\n\nExperiment with adding more widgets and interactivity to the Tkinter or Jupyter Widgets dashboard.\nCustomise the layout and design of the GUI to improve user experience."
  },
  {
    "objectID": "notebooks/06b_dashboard_gui.html#summary",
    "href": "notebooks/06b_dashboard_gui.html#summary",
    "title": "WeatherVista Project - Session 6b: Creating a GUI with Tkinter",
    "section": "Summary",
    "text": "Summary\nIn this session, we learned how to create a graphical user interface (GUI) for the WeatherVista project using Tkinter and Jupyter Widgets. We created interactive elements to fetch and display weather data, providing a more engaging user experience.\nNext session, we will focus on writing and running tests with pytest and doctest."
  },
  {
    "objectID": "notebooks/03_visualisation.html",
    "href": "notebooks/03_visualisation.html",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "",
    "text": "Learn how to visualise weather data using Matplotlib.\nUnderstand how to create basic plots to represent weather data.\nCustomise plots to enhance readability and presentation."
  },
  {
    "objectID": "notebooks/03_visualisation.html#objectives",
    "href": "notebooks/03_visualisation.html#objectives",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "",
    "text": "Learn how to visualise weather data using Matplotlib.\nUnderstand how to create basic plots to represent weather data.\nCustomise plots to enhance readability and presentation."
  },
  {
    "objectID": "notebooks/03_visualisation.html#introduction-to-basic-visualization",
    "href": "notebooks/03_visualisation.html#introduction-to-basic-visualization",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "1. Introduction to Basic Visualization",
    "text": "1. Introduction to Basic Visualization\nBasic visualizations help in understanding data by providing a graphical representation.\n\nImport Required Libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "notebooks/03_visualisation.html#reading-data",
    "href": "notebooks/03_visualisation.html#reading-data",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "2. Reading Data",
    "text": "2. Reading Data\nWe’ll start by reading the processed weather data from the CSV file.\n\ndf = pd.read_csv('processed_weather_data.csv')\ndf['Datetime'] = pd.to_datetime(df['Datetime'])\ndf.head()"
  },
  {
    "objectID": "notebooks/03_visualisation.html#creating-basic-plots",
    "href": "notebooks/03_visualisation.html#creating-basic-plots",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "3. Creating Basic Plots",
    "text": "3. Creating Basic Plots\n\nLine Plot for Temperature Over Time\n\n# Select every 6th datetime value for x-ticks\nx_ticks = df['Datetime'][::6]\n\nplt.figure(figsize=(10, 6))\nplt.plot(df['Datetime'], df['Temperature (C)'], marker='o')\nplt.title('Temperature over Time')\nplt.xlabel('Datetime')\nplt.ylabel('Temperature (°C)')\nplt.xticks(ticks=x_ticks, rotation=45)\nplt.grid(True)\nplt.show()\n\n\n\nBar Plot for Humidity Over Time\n\nplt.figure(figsize=(10, 6))\nplt.bar(df['Datetime'], df['Humidity (%)'], color='skyblue')\nplt.title('Humidity over Time')\nplt.xlabel('Datetime')\nplt.ylabel('Humidity (%)')\nplt.xticks(ticks=x_ticks, rotation=45)\nplt.show()\n\n\n\nPie Chart for Weather Description Distribution\n\nweather_counts = df['Weather'].value_counts()\n\nplt.figure(figsize=(8, 8))\nplt.pie(weather_counts, labels=weather_counts.index, autopct='%1.1f%%', startangle=140)\nplt.title('Weather Description Distribution')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n\n\n\nScatter Plot for Temperature vs. Wind Speed\n\nplt.figure(figsize=(10, 6))\nplt.scatter(df['Temperature (C)'], df['Wind Speed (m/s)'], c='g', marker='o')\nplt.title('Temperature vs. Wind Speed')\nplt.xlabel('Temperature (°C)')\nplt.ylabel('Wind Speed (m/s)')\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "notebooks/03_visualisation.html#customizing-plots",
    "href": "notebooks/03_visualisation.html#customizing-plots",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "4. Customizing Plots",
    "text": "4. Customizing Plots\nCustomizing plots can make them more informative and visually appealing.\n\nAdding Annotations\n\nplt.figure(figsize=(10, 6))\nplt.plot(df['Datetime'], df['Temperature (C)'], marker='o')\nplt.title('Temperature over Time')\nplt.xlabel('Datetime')\nplt.ylabel('Temperature (°C)')\nplt.xticks(ticks=x_ticks, rotation=45)\nplt.grid(True)\n\n# Annotate the highest temperature\nmax_temp = df['Temperature (C)'].max()\nmax_temp_time = df.loc[df['Temperature (C)'] == max_temp, 'Datetime'].iloc[0]\nplt.annotate(f'Max Temp: {max_temp:.2f}°C', xy=(max_temp_time, max_temp), \n             xytext=(max_temp_time, max_temp+2), \n             arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.show()\n\n\n\nCustomizing Colors and Styles\n\nplt.figure(figsize=(10, 6))\nplt.plot(df['Datetime'], df['Temperature (C)'], marker='o', linestyle='--', color='b')\nplt.title('Temperature over Time', fontsize=14, fontweight='bold')\nplt.xlabel('Datetime', fontsize=12)\nplt.ylabel('Temperature (°C)', fontsize=12)\nplt.xticks(ticks=x_ticks, rotation=45)\nplt.grid(True, linestyle='--', linewidth=0.5)\n\nplt.show()"
  },
  {
    "objectID": "notebooks/03_visualisation.html#homework",
    "href": "notebooks/03_visualisation.html#homework",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "Homework",
    "text": "Homework\n\nCreate additional plots to visualize other aspects of the weather data (e.g., wind speed, pressure).\nExperiment with different types of plots and customizations to enhance the visualizations."
  },
  {
    "objectID": "notebooks/03_visualisation.html#summary",
    "href": "notebooks/03_visualisation.html#summary",
    "title": "WeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "Summary",
    "text": "Summary\nIn this session, we learned how to visualize weather data using Matplotlib. We created basic plots such as line plots, bar plots, pie charts, and scatter plots, and we customized these plots to improve readability and presentation.\nNext session, we will focus on advanced data visualization techniques using subplots and grids."
  },
  {
    "objectID": "notebooks/01_fetch_data.html",
    "href": "notebooks/01_fetch_data.html",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "",
    "text": "Learn how to fetch weather data using the OpenWeatherMap API.\nUnderstand how to handle API responses and errors.\nSave fetched data to a CSV file."
  },
  {
    "objectID": "notebooks/01_fetch_data.html#objectives",
    "href": "notebooks/01_fetch_data.html#objectives",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "",
    "text": "Learn how to fetch weather data using the OpenWeatherMap API.\nUnderstand how to handle API responses and errors.\nSave fetched data to a CSV file."
  },
  {
    "objectID": "notebooks/01_fetch_data.html#introduction-to-openweathermap-api",
    "href": "notebooks/01_fetch_data.html#introduction-to-openweathermap-api",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "1. Introduction to OpenWeatherMap API",
    "text": "1. Introduction to OpenWeatherMap API\nThe OpenWeatherMap API provides weather data for various locations. You need to sign up and get an API key to access the data.\n\nSteps to Get API Key\n\nGo to OpenWeatherMap and sign up for an account.\nAfter signing up, navigate to the API keys section and generate a new API key.\nKeep this API key safe, as you will need it to make API requests."
  },
  {
    "objectID": "notebooks/01_fetch_data.html#fetching-weather-data",
    "href": "notebooks/01_fetch_data.html#fetching-weather-data",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "2. Fetching Weather Data",
    "text": "2. Fetching Weather Data\nWe’ll use the requests library to fetch weather data from the OpenWeatherMap API.\n\nImport Required Libraries\n\nimport requests\nimport pandas as pd\n\n\n\nFetch some Data\nLets fetch some data.. Replace 'your_api_key_here' with your actual API key and fetch data for a sample location.\n\n# Setup important variables\napi_key = 'your_api_key_here'\nlocation = 'Guangzhou'\n\n# Make request to website endpoint\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}\"\nresponse = requests.get(url)\n\n# Print response\nresponse\n\nWhat happens if the location does not exist, try a location that does not exist. Replace 'your_api_key_here' with your actual API key and fetch data for a sample location.\n\n# Setup important variables\napi_key = 'your_api_key_here'\nlocation = 'ABCDEFGHIJK'\n\n# Make request to website endpoint\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}\"\nresponse = requests.get(url)\n\n# Print response\nresponse\n\n\n\nDefine Function to Fetch Weather Data\nWe’ll create a function to fetch weather data for a specific location.\n\ndef fetch_weather_data(api_key, location):\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Failed to fetch data: {response.status_code}\")\n        return None\n\n\n\nFetch Data for a Sample Location\nReplace 'your_api_key_here' with your actual API key and fetch data for a sample location.\n\napi_key = 'your_api_key_here'\nlocation = 'Guangzhou'\ndata = fetch_weather_data(api_key, location)\ndata"
  },
  {
    "objectID": "notebooks/01_fetch_data.html#parsing-and-displaying-data",
    "href": "notebooks/01_fetch_data.html#parsing-and-displaying-data",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "3. Parsing and Displaying Data",
    "text": "3. Parsing and Displaying Data\nWe’ll parse the JSON response and extract relevant information.\n\ndef parse_weather_data(data):\n    if data:\n        weather = {\n            \"Location\": data[\"name\"],\n            \"Temperature (K)\": data[\"main\"][\"temp\"],\n            \"Humidity (%)\": data[\"main\"][\"humidity\"],\n            \"Weather\": data[\"weather\"][0][\"description\"]\n        }\n        return weather\n    else:\n        return None\n\nparsed_data = parse_weather_data(data)\nparsed_data"
  },
  {
    "objectID": "notebooks/01_fetch_data.html#saving-data-to-a-csv-file",
    "href": "notebooks/01_fetch_data.html#saving-data-to-a-csv-file",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "4. Saving Data to a CSV File",
    "text": "4. Saving Data to a CSV File\nWe’ll save the fetched data to a CSV file using pandas.\n\nConvert Data to DataFrame\n\ndef save_to_csv(data, filename):\n    df = pd.DataFrame([data])\n    df.to_csv(filename, index=False)\n\nsave_to_csv(parsed_data, 'data/raw/weather_data.csv')\n\n\n\nRead and Display the CSV File\n\ndf = pd.read_csv('data/raw/weather_data.csv')\ndf"
  },
  {
    "objectID": "notebooks/01_fetch_data.html#error-handling",
    "href": "notebooks/01_fetch_data.html#error-handling",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "5. Error Handling",
    "text": "5. Error Handling\nIt’s important to handle errors that may occur during API requests. We’ve already added basic error handling in the fetch_weather_data function. Let’s test it with an invalid location.\n\nTest Error Handling\n\ninvalid_location = 'InvalidCity'\ninvalid_data = fetch_weather_data(api_key, invalid_location)\ninvalid_data"
  },
  {
    "objectID": "notebooks/01_fetch_data.html#homework",
    "href": "notebooks/01_fetch_data.html#homework",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "Homework",
    "text": "Homework\n\nExperiment with fetching weather data for different cities.\nExplore the OpenWeatherMap API documentation to see what other data you can fetch."
  },
  {
    "objectID": "notebooks/01_fetch_data.html#summary",
    "href": "notebooks/01_fetch_data.html#summary",
    "title": "WeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API",
    "section": "Summary",
    "text": "Summary\nIn this session, we learned how to fetch weather data from the OpenWeatherMap API, parse the JSON response, and save the data to a CSV file. We also covered basic error handling to manage failed API requests.\nNext session, we will focus on managing data with CSV and SQL."
  },
  {
    "objectID": "notebooks/05_webscraping.html",
    "href": "notebooks/05_webscraping.html",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "",
    "text": "Learn the basics of web scraping using BeautifulSoup.\nUnderstand ethical considerations and legal aspects of web scraping.\nExplore and use additional APIs to gather more weather-related data."
  },
  {
    "objectID": "notebooks/05_webscraping.html#objectives",
    "href": "notebooks/05_webscraping.html#objectives",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "",
    "text": "Learn the basics of web scraping using BeautifulSoup.\nUnderstand ethical considerations and legal aspects of web scraping.\nExplore and use additional APIs to gather more weather-related data."
  },
  {
    "objectID": "notebooks/05_webscraping.html#introduction-to-web-scraping",
    "href": "notebooks/05_webscraping.html#introduction-to-web-scraping",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "1. Introduction to Web Scraping",
    "text": "1. Introduction to Web Scraping\nWeb scraping involves extracting data from websites. It is important to adhere to ethical guidelines and terms of service of websites.\n\nImport Required Libraries\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd"
  },
  {
    "objectID": "notebooks/05_webscraping.html#basic-web-scraping-with-beautifulsoup",
    "href": "notebooks/05_webscraping.html#basic-web-scraping-with-beautifulsoup",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "2. Basic Web Scraping with BeautifulSoup",
    "text": "2. Basic Web Scraping with BeautifulSoup\nWe’ll scrape weather-related data from a sample website.\n\nFetching the HTML Content\n\nurl = 'https://www.example.com/weather'\nresponse = requests.get(url)\nhtml_content = response.content\n\n\n\nParsing the HTML Content\n\nsoup = BeautifulSoup(html_content, 'html.parser')\nprint(soup.prettify())  # Print the formatted HTML content\n\n\n\nExtracting Specific Data\nAssuming the website has a table with weather data, we’ll extract the table content.\n\ntable = soup.find('table', {'class': 'weather_table'})\nrows = table.find_all('tr')\n\nweather_data = []\nfor row in rows[1:]:  # Skip the header row\n    cols = row.find_all('td')\n    data = {\n        'Date': cols[0].text,\n        'Temperature': cols[1].text,\n        'Humidity': cols[2].text,\n        'Condition': cols[3].text\n    }\n    weather_data.append(data)\n\nweather_df = pd.DataFrame(weather_data)\nweather_df"
  },
  {
    "objectID": "notebooks/05_webscraping.html#using-additional-apis",
    "href": "notebooks/05_webscraping.html#using-additional-apis",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "3. Using Additional APIs",
    "text": "3. Using Additional APIs\nWe’ll explore additional APIs to fetch more weather-related data, such as air quality or UV index.\n\nAir Quality API Example\nWe’ll use the AirNow API to fetch air quality data.\n\n\nImport Required Libraries\n\nimport requests\nimport pandas as pd\n\n\n\nFetching Air Quality Data\n\napi_key = 'your_airnow_api_key'\nurl = f\"http://www.airnowapi.org/aq/observation/zipCode/current?format=application/json&zipCode=90210&distance=25&API_KEY={api_key}\"\n\nresponse = requests.get(url)\nif response.status_code == 200:\n    air_quality_data = response.json()\n    air_quality_data\nelse:\n    print(f\"Failed to fetch data: {response.status_code}\")\n\n\n\nParsing Air Quality Data\nWe’ll parse the JSON response and create a DataFrame.\n\nair_quality_df = pd.DataFrame(air_quality_data)\nair_quality_df"
  },
  {
    "objectID": "notebooks/05_webscraping.html#combining-web-scraping-and-api-data",
    "href": "notebooks/05_webscraping.html#combining-web-scraping-and-api-data",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "4. Combining Web Scraping and API Data",
    "text": "4. Combining Web Scraping and API Data\nWe’ll combine the scraped weather data and the data fetched from additional APIs.\n\nMerging DataFrames\n\ncombined_df = pd.merge(weather_df, air_quality_df, left_on='Date', right_on='Date', how='inner')\ncombined_df"
  },
  {
    "objectID": "notebooks/05_webscraping.html#homework",
    "href": "notebooks/05_webscraping.html#homework",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "Homework",
    "text": "Homework\n\nExplore other weather-related websites and practice web scraping to gather data.\nExperiment with additional APIs to fetch various types of weather data."
  },
  {
    "objectID": "notebooks/05_webscraping.html#summary",
    "href": "notebooks/05_webscraping.html#summary",
    "title": "WeatherVista Project - Session 5: Web Scraping and Using Additional APIs",
    "section": "Summary",
    "text": "Summary\nIn this session, we learned the basics of web scraping using BeautifulSoup and explored additional APIs to fetch more weather-related data. We also combined the data from web scraping and APIs to create a comprehensive dataset.\nNext session, we will focus on creating a GUI for the WeatherVista project using Tkinter or Jupyter Widgets."
  },
  {
    "objectID": "notebooks/08_documentation.html",
    "href": "notebooks/08_documentation.html",
    "title": "WeatherVista Project - Session 8: Documentating project with mkdocs and doctest",
    "section": "",
    "text": "Step-by-Step Guide:\n\nInstall MkDocs and mkdocstrings:\n\nFirst install the mkdocs program and support for Pytohn\n\n!pip install mkdocs mkdocstrings mkdocstrings-python\n\n\nInitialize the MkDocs Project:\n\n\nimport os\n\n# Change directory to the root of your overall project\nos.chdir('..')\n\n# Initialize a new MkDocs project in the root directory\n!mkdocs new .\n\n# Verify the current working directory (should be the root of your overall project)\nos.getcwd()\n\n\nUpdate the mkdocs.yml Configuration:\n\nCreate a new mkdocs.yml content to include the mkdocstrings plugin.\n\n# Create a new mkdocs.yml content\nmkdocs_yml_content = \"\"\"\nsite_name: My Project Documentation\n\nnav:\n    - Home: index.md\n\nplugins:\n    - search\n    - mkdocstrings:\n        handlers:\n            python:\n                setup_commands:\n                    - pip install mkdocstrings-python\n\n# Paths to the documentation files\ndocs_dir: docs\nsite_dir: site\n\"\"\"\n\n# Write the content to mkdocs.yml\nwith open('mkdocs.yml', 'w') as file:\n    file.write(mkdocs_yml_content)\n\n\nCreate the index.md Page:\n\nInclude the module references directly in the index.md.\n\n\nindex.md:\n\nindex_md_content = \"\"\"\n# Welcome to My Project Documentation\n\nThis documentation covers the scripts used in the project.\n\n## API Reference\n\n### fetch_data\n\n::: scripts.fetch_data\n\n### process_data\n\n::: scripts.process_data\n\"\"\"\n\n# Write the content to index.md\nwith open('docs/index.md', 'w') as file:\n    file.write(index_md_content)\n\n\nEnsure PYTHONPATH is Set Correctly:\n\nTo make sure MkDocs can find your scripts directory, set the PYTHONPATH environment variable.\nYou can set the PYTHONPATH in the terminal or include it in the build command.\nFor example, in your terminal:\nexport PYTHONPATH=$(pwd)\n\n# Build the documentation with PYTHONPATH set\n!mkdocs build\n\n# Serve the documentation with PYTHONPATH set\n!mkdocs serve\n\nYou can now access the documentation locally at http://127.0.0.1:8000.\n\n\nSummary\nIn this notebook, we learned how to: - Install MkDocs, mkdocstrings, and mkdocstrings-python. - Initialize an MkDocs project in the root of your overall project. - Configure MkDocs to use mkdocstrings for auto-generating documentation. - Directly include module references in the index.md file. - Ensure the PYTHONPATH is set correctly so MkDocs can find your scripts. - Build and serve the documentation locally."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "slides/05_advanced_visualisations.html",
    "href": "slides/05_advanced_visualisations.html",
    "title": "Plotting Perfection: Mastering Matplotlib Dashboards",
    "section": "",
    "text": "Today\n\nCreate daily forecast cards with high/low temperatures.\nDesign a layout for the dashboard using subplots and grids.\nUse icons to represent weather conditions.\nOutput:\n\n04_advanced_vix.ipynb\nvisualise_data.py\n\n\n\n\nRecap and Introduction (10 minutes)\n\nRecap of Session 4:\n\nKey takeaways\nAny remaining questions\n\nIntroduction:\n\nImportance of advanced data visualisation\nAdvanced visualisations can provide more insights by combining multiple plots into a single figure, allowing for easier comparison and analysis.\nOverview of dashboard layout techniques\n\n\n\n\nPrinciples of Effective Data Visualisation\n\nClarity:\n\nEnsure the visual is easy to understand.\nAvoid clutter and unnecessary elements.\n\nAccuracy:\n\nRepresent data truthfully.\nAvoid misleading scales or distortions.\n\nEfficiency:\n\nConvey information quickly.\nUse visual cues like color and sise effectively.\n\n\n\n\nDashboard Design Best Practices\n\nConsistency:\n\nMaintain a uniform style and layout.\nUse consistent colors, fonts, and iconography.\n\nRelevance:\n\nInclude only necessary information.\nPrioritise key metrics and insights.\n\nInteractivity:\n\nEnhance user engagement.\nAllow for exploration and filtering of data.\n\n\n\n\nWhat Makes Plots Advanced?\n\nCombining Multiple Plots:\n\nUse subplots to create complex visualisations within a single figure.\nExamples: 2x2 grids, multi-panel plots.\n\nCustomisations:\n\nAnnotations, colour schemes, and styles to enhance readability.\nInteractive elements for user engagement.\n\nData Transformation:\n\nUsing statistical transformations (e.g., regression lines, smoothing).\nAggregating and summarising data for better insights.\n\n\n\n\nImport Required Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nReading Data\n\nWe’ll start by reading the processed weather data from the CSV file.\n\ndf = pd.read_csv('processed_weather_data.csv')\ndf['Datetime'] = pd.to_datetime(df['Datetime'])\ndf.head()\n\n\nCreating a 2x2 Grid of Plots\n\nSubplots allow us to create multiple plots within a single figure.\nWe’ll create a 2x2 grid of plots to visualise different aspects of the weather data.\n\nfig, axs = plt.subplots(2, 2, figsize=(14, 10))\n\n\nfig & axs\n\nfig: Entire figure container object\naxs: Array of subplot axes\nYou can use fig to adjust figure-wide settings (like the overall size) and\naxs to customise each subplot individually.\n\n\n\nAccess each subplot by indexing into axs\naxs[0, 0].plot([1, 2, 3], [1, 4, 9])  # Top-left subplot\naxs[0, 1].plot([1, 2, 3], [1, 2, 3])  # Top-right subplot\naxs[1, 0].plot([1, 2, 3], [9, 4, 1])  # Bottom-left subplot\naxs[1, 1].plot([1, 2, 3], [3, 2, 1])  # Bottom-right subplot\n\nplt.tight_layout()\nplt.show()\n\n# Save the figure\nfig.savefig('my_plot.png')\n\n\nFour plots\n\n\n\nPlot 1: Line plot for Temperature over Time\n# Select every 6th datetime value for x-ticks\nx_ticks = df['Datetime'][::6]\n\naxs[0, 0].plot(df['Datetime'], df['Temperature (C)'], marker='o')\naxs[0, 0].set_title('Temperature over Time')\naxs[0, 0].set_xlabel('Datetime')\naxs[0, 0].set_ylabel('Temperature (°C)')\naxs[0, 0].set_xticks(x_ticks)\naxs[0, 0].tick_params(axis='x', rotation=45)\n\n\nAdd line of best fit for Temperature over Time\ns = np.polyfit(df['Datetime'].astype(np.int64) // 10**9, df['Temperature (C)'], 1)\np = np.poly1d(s)\naxs[0, 0].plot(df['Datetime'], p(df['Datetime'].astype(np.int64) // 10**9), \"r--\")\n\n\nPlot 2: Bar plot for Humidity over Time\naxs[0, 1].bar(df['Datetime'], df['Humidity (%)'], color='skyblue')\naxs[0, 1].set_title('Humidity over Time')\naxs[0, 1].set_xlabel('Datetime')\naxs[0, 1].set_ylabel('Humidity (%)')\naxs[0, 1].set_xticks(x_ticks)\naxs[0, 1].tick_params(axis='x', rotation=45)\n\n\nPlot 3: Pie chart for Weather Description\nweather_counts = df['Weather'].value_counts()\naxs[1, 0].pie(weather_counts, labels=weather_counts.index, autopct='%1.1f%%', startangle=140)\naxs[1, 0].set_title('Weather Description Distribution')\naxs[1, 0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n\nPlot 4: Scatter plot for Temperature vs. Wind Speed\naxs[1, 1].scatter(df['Temperature (C)'], df['Wind Speed (m/s)'], c='g', marker='o')\naxs[1, 1].set_title('Temperature vs. Wind Speed')\naxs[1, 1].set_xlabel('Temperature (°C)')\naxs[1, 1].set_ylabel('Wind Speed (m/s)')\naxs[1, 1].grid(True)\n\n\nAdd line of best fit for Temperature vs. Wind Speed\ns = np.polyfit(df['Temperature (C)'], df['Wind Speed (m/s)'], 1)\np = np.poly1d(s)\naxs[1, 1].plot(df['Temperature (C)'], p(df['Temperature (C)']), \"r--\")\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n\n\nCustomising Subplots\n\nCustomising subplots can enhance their readability and presentation.\nAnnotations\nColours and Styles\n\n\n\nSetup a plot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(df['Datetime'], df['Temperature (C)'], marker='o')\nax.set_title('Temperature over Time')\nax.set_xlabel('Datetime')\nax.set_ylabel('Temperature (°C)')\nax.set_xticks(x_ticks)\nax.tick_params(axis='x', rotation=45)\nax.grid(True)\n\n\nAnnotate the highest temperature\nmax_temp = df['Temperature (C)'].max()\nmax_temp_time = df.loc[df['Temperature (C)'] == max_temp, 'Datetime'].iloc[0]\nax.annotate(f'Max Temp: {max_temp:.2f}°C', xy=(max_temp_time, max_temp), \n             xytext=(max_temp_time, max_temp+2), \n             arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.show()\n\n\nCustomising Colours and Styles\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(df['Datetime'], df['Temperature (C)'], marker='o', linestyle='--', color='b')\nax.set_title('Temperature over Time', fontsize=14, fontweight='bold')\nax.set_xlabel('Datetime', fontsize=12)\nax.set_ylabel('Temperature (°C)', fontsize=12)\nax.set_xticks(x_ticks)\nax.tick_params(axis='x', rotation=45)\nax.grid(True, linestyle='--', linewidth=0.5)\n\nplt.show()\n\n\nSummary\n\nIn this session, we learned how to visualise weather data using advanced techniques in Matplotlib. We created subplots and grids, combined multiple plots into a single figure, and customised these plots for better presentation.\n\n\n\nHomework - Design Dashboard\n\nTask:\n\nModify, Refine and enhance existing visualisations\n\nFor example: remove line of best fit, change colours, titles\n\nCreate additional subplots to visualise other aspects of the weather data (e.g., wind speed, pressure).\n\nFor example: compare min/max over 5 days, Word Cloud for description\n\nExperiment with different types of subplots and customisations to enhance the visualisations.\nInspiration form internet or Search\n\nPython Graph Library\nMatplotlib Gallery\n\n\nSubmission:\n\nUpload the refined notebook and script to the shared folder"
  },
  {
    "objectID": "slides/09_documenting.html",
    "href": "slides/09_documenting.html",
    "title": "Documenting Your Python Project: A Beginner’s Guide",
    "section": "",
    "text": "Improve code readability\nHelp others understand your code\nFacilitate maintenance and collaboration"
  },
  {
    "objectID": "slides/09_documenting.html#usage",
    "href": "slides/09_documenting.html#usage",
    "title": "Documenting Your Python Project: A Beginner’s Guide",
    "section": "Usage",
    "text": "Usage\nfrom your_project import your_function\nresult = your_function()\nprint(result)"
  },
  {
    "objectID": "slides/09_documenting.html#features",
    "href": "slides/09_documenting.html#features",
    "title": "Documenting Your Python Project: A Beginner’s Guide",
    "section": "Features",
    "text": "Features\n\nFeature 1\nFeature 2"
  },
  {
    "objectID": "slides/09_documenting.html#license",
    "href": "slides/09_documenting.html#license",
    "title": "Documenting Your Python Project: A Beginner’s Guide",
    "section": "License",
    "text": "License\nMIT\n\n# Introducing MkDocs\n\n**What is MkDocs?**\n- Simple static site generator for project documentation\n- Easy to setup and use\n\n# Installing MkDocs\n\n**Install MkDocs**\n```bash\npip install mkdocs"
  },
  {
    "objectID": "slides/06_midpoint_review.html",
    "href": "slides/06_midpoint_review.html",
    "title": "Midpoint Review: Strengthening Our Python Foundations",
    "section": "",
    "text": "Introduction\nObjective: Review key programming concepts. - Importance of understanding these fundamentals for the project.\n\n\nSimple 5-Step Development Methodology\nKey Points: - Understand the Problem: Clearly define what needs to be solved. - Work out the Inputs and Outputs: Identify the data required and the expected results. - Work the Problems by Hand: Manually solve examples to create test cases. - Write out Pseudocode and Convert to Python: Plan the logic in pseudocode before coding. - Test with a Variety of Data: Ensure the program works with different inputs.\nThe Six Fundamental Operations of Computer Programs\n\nInput\n\nReceiving data from external sources (e.g., user input, file input).\n\nOutput\n\nSending data to external destinations (e.g., displaying data, writing to a file).\n\nStorage\n\nSaving and retrieving data (e.g., using variables, databases).\n\nComputation\n\nPerforming arithmetic or logical operations (e.g., calculations, comparisons).\n\nDecision Making\n\nEvaluating conditions and making decisions (e.g., if-else statements).\n\nIteration\n\nRepeating a set of instructions (e.g., loops such as for, while).\n\n\n\n\nBasic Operators and Assignment\nKey Points:\n\nOperators: Arithmetic (+, -, *, /), Comparison (==, !=, &gt;, &lt;), Logical (and, or, not).\nAssignment: Using = to assign values to variables.\nExample:\n\na = 10\nb = 20\nsum = a + b\nis_equal = (a == b)\n\n\nBasic Data Types and Structures\nKey Points:\n\nData Types: Integer, Float, String, Boolean.\nData Structures: List, Dictionary, Tuple.\nExample:\n\ninteger = 10\nfloat_num = 10.5\nstring = \"Hello, World!\"\nboolean = True\n\n# List\nmy_list = [1, 2, 3, 4, 5]\n\n# Dictionary\nmy_dict = {\"name\": \"Alice\", \"age\": 25}\n\n# Tuple\nmy_tuple = (1, 2, 3)\n\n\nSequence\n\nDefinition: The order in which instructions are executed.\nImportance: Ensures that the program runs as expected.\nExample:\n\nprint(\"Step 1\")\nprint(\"Step 2\")\nprint(\"Step 3\")\n\n\nSelection (Conditionals)\nKey Points:\n\nDefinition: Making decisions based on conditions using if, elif, and else.\nImportance: Allows the program to take different actions based on different conditions.\nExample:\n\ntemperature = 20\nif temperature &gt; 25:\n    print(\"It's hot!\")\nelif temperature &gt; 15:\n    print(\"It's warm!\")\nelse:\n    print(\"It's cold!\")\n\n\nRepetition (Loops)\nKey Points:\n\nDefinition: Repeating a set of instructions using for and while loops.\nImportance: Reduces code redundancy and handles repetitive tasks efficiently.\nExample:\n\nfor i in range(5):\n    print(f\"Iteration {i}\")\n\n\nFunctions (Creation and Use)\nKey Points:\n\nDefinition: A block of code that performs a specific task, defined using def.\nImportance: Promotes code reuse and modularity.\nExample:\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n\n\nImporting Packages\nKey Points:\n\nDefinition: Using external libraries to extend the functionality of your programs.\nImportance: Enables use of pre-written code for common tasks (e.g., data manipulation, visualization).\nExample:\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nBasic File I/O\nKey Points:\n\nDefinition: Reading from and writing to files.\nImportance: Essential for data persistence and handling large datasets.\nExample:\n\n# Writing to a file\nwith open('example.txt', 'w') as file:\n    file.write('Hello, World!')\n\n# Reading from a file\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\n\nData Management with CSV\nKey Points:\n\nDefinition: Reading from and writing to CSV files using pandas.\nImportance: Storing and manipulating data in a tabular format.\nExample:\n\nimport pandas as pd\n\n# Reading a CSV file\ndata = pd.read_csv('weather_data.csv')\nprint(data.head())\n\n# Writing to a CSV file\ndata.to_csv('processed_weather_data.csv', index=False)\n\n\nBasic Data Visualization\nKey Points:\n\nDefinition: Creating visual representations of data using matplotlib.\nImportance: Helps in understanding and interpreting data.\nExample:\n\nimport matplotlib.pyplot as plt\n\ntemperatures = [20, 21, 19, 22, 23]\nplt.plot(temperatures)\nplt.title('Temperature over Days')\nplt.xlabel('Day')\nplt.ylabel('Temperature')\nplt.show()"
  },
  {
    "objectID": "slides/02_fetching_data.html",
    "href": "slides/02_fetching_data.html",
    "title": "API Adventures: Conquering OpenWeatherMap",
    "section": "",
    "text": "Today\n\nEmphasize the importance of understanding APIs and data fetching in Python.\nHighlight the skills that will be learned in this session:\n\nFetching data using the OpenWeatherMap API.\nParsing JSON data.\nHandling errors.\n\n\n\n\nReview Homework\n\nReview the provided notebook on basics of Python\n\n\n\nIntroduction to OpenWeatherMap API\n\nThe OpenWeatherMap API provides weather data for various locations. You need to sign up and get an API key to access the data.\nSteps to Get API Key:\n\nGo to OpenWeatherMap and sign up for an account.\nAfter signing up, navigate to the API keys section and generate a new API key.\nKeep this API key safe, as you will need it to make API requests.\n\n\n\n\nFetching Data\n\nDemonstrate how to use the requests library to fetch data from the OpenWeatherMap API.\nIntroduce the concept of HTTP requests and responses.\nShow how to handle errors and exceptions in Python.\n\n\n\nExample - Create Function\nimport requests\n\ndef fetch_weather_data(api_key, location):\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Failed to fetch data: {response.status_code}\")\n        return None\n\n\nExample - Use function\napi_key = 'your_api_key_here'\nlocation = 'London'\ndata = fetch_weather_data(api_key, location)\ndata\n\n\nWhat is JSON\n\nJavaScript Object Notation,\nJSON is a text-based format\nJSON is easy to read and write\nJSON is widely used for data exchange\n\n\n\nParsing JSON Data\n\nJSON used to represent data.\nimport json to serialise list, dict etc to JSON\nresponse.json() convert JSON to Python dict.\nHighlight the importance of data parsing and how it is used in the weather dashboard project.\n\n\n\nExample - parse_weather_data\ndef parse_weather_data(data):\n    if data:\n        weather = {\n            \"Location\": data[\"name\"],\n            \"Temperature (K)\": data[\"main\"][\"temp\"],\n            \"Humidity (%)\": data[\"main\"][\"humidity\"],\n            \"Weather\": data[\"weather\"][0][\"description\"]\n        }\n        return weather\n    else:\n        return None\n\nparsed_data = parse_weather_data(data)\nparsed_data\n\n\nSaving Data to a CSV File\n\nCSV another format for sharing data\nWe’ll save the fetched data to a CSV file using pandas.\npandas open-source library for data manipulation and analysis\n\n\n\nExample\nimport pandas as pd\n\ndef save_to_csv(data, filename):\n    df = pd.DataFrame([data]). # convert dict to df\n    df.to_csv(filename, index=False)\n\nsave_to_csv(parsed_data, 'data/raw/weather_data.csv')\ndf = pd.read_csv('data/raw/weather_data.csv')\ndf\n\n\nError Handling\n\nIntroduce the concept of error handling in Python and its importance.\nDemonstrate how to use try-except blocks to handle errors in Python.\nHighlight the importance of error handling in the weather dashboard project.\n\n\n\nError Handling - Example\ninvalid_location = 'InvalidCity'\ninvalid_data = fetch_weather_data(api_key, invalid_location)\ninvalid_data\n\n\nBreakout Room Activity\n\nEmphasise the importance of teamwork and collaboration in the project.\nEncourage students to work together to fetch and parse data for different cities.\nEncourage students to share their findings and discuss challenges.\n\n\n\nQ&A and Wrap-Up\n\nIn this session, we learned how to fetch weather data from the OpenWeatherMap API, parse the JSON response, and save the data to a CSV file. We also covered basic error handling to manage failed API requests.\nAny questions”\nThe importance of practising and experimenting with the concepts learned in the session.\nNext session, we will focus on managing data with CSV and SQL.\n\n\n\nHomework\n\nExperiment with fetching weather data for different cities.\nExplore the OpenWeatherMap API documentation to see what other data you can fetch."
  },
  {
    "objectID": "slides/10_testing.html",
    "href": "slides/10_testing.html",
    "title": "Code Warriors: The Art of Testing",
    "section": "",
    "text": "Objectives\n\nLearn the importance of testing in software development.\nUnderstand how to write tests using doctest.\nRun tests using doctest\n\n\n\nWhy Test?\n\nEnsure code correctness\nImprove software quality\nDetect bugs early\nValidate functionality\nFacilitate maintenance\n\n\n\nTypes of Testing\n\n\n\n\n\n\n\nTest Type\nDescription\n\n\n\n\nUnit\nTest an individual isolated component\n\n\nIntegration\nTest multiple units work together\n\n\nEnd-to-End\nAct as user, test entire stack\n\n\nAcceptance Test\nVerify user story works as expected\n\n\n\n\n\nUnderstanding Different Types of Errors\n\n\n\n\n\n\n\n\nError Type\nDescription\nExample\n\n\n\n\nSyntax Error\nOccurs when the code violates the syntax rules of the programming language.\nprint(\"Hello World (missing closing parenthesis)\n\n\nRuntime Error\nOccurs during the execution of the program, causing it to terminate abruptly.\nDivision by zero: 1 / 0\n\n\nLogical Error\nOccurs when the code runs without crashing but produces incorrect results.\nUsing = instead of == in a conditional statement\n\n\n\n\n\nExample Runtime Errors\n\n\n\n\n\n\n\n\nException\nDescription\nExample\n\n\n\n\nType Error\nOccurs when an operation or function is applied to an object of inappropriate type.\nTrying to add a string and an integer: \"2\" + 2\n\n\nName Error\nOccurs when a variable or function name is not found.\nUsing an undefined variable: print(x) (where x is not defined)\n\n\nIndex Error\nOccurs when trying to access an element outside the bounds of a list.\nAccessing a non-existent list index: my_list[10] (for a list of length &lt; 11)\n\n\nAttribute Error\nOccurs when an invalid attribute reference or assignment is made.\nAccessing a non-existent attribute: my_obj.non_existent_attribute\n\n\nValue Error\nOccurs when a function receives an argument of the right type but inappropriate value.\nConverting an invalid string to an integer: int(\"abc\")\n\n\n\n\n\nTools for Testing\n\nassert\nunittest\npytest\ndoctest\n\nCertainly! Here are two slides on using assert outside of any testing framework:\nWhat is assert? - A built-in statement used to test conditions - Raises an AssertionError if the condition is False - Quick and easy way to test code - Useful for catching bugs early - Immediate feedback on failed conditions - Enhances code reliability and correctness\nBasic Usage\ndef add(a, b):\n    return a + b\n\nresult = add(2, 3)\nassert result == 5, f\"Expected 5, got {result}\"\n\n\nExample: Using assert for Validation\ndef multiply(a, b):\n    return a * b\n\n# Test cases\nassert multiply(2, 3) == 6, \"Test case 1 failed\"\nassert multiply(-1, 5) == -5, \"Test case 2 failed\"\nassert multiply(0, 10) == 0, \"Test case 3 failed\"\n\n\nExample: Checking conditions\ndef divide(a, b):\n    assert b != 0, \"Denominator cannot be zero\"\n    return a / b\n\n# Test cases\nassert divide(10, 2) == 5, \"Test case 1 failed\"\nassert divide(9, 3) == 3, \"Test case 2 failed\"\n\n\nExample: Using unittest\nimport unittest\n\ndef add(a, b):\n    return a + b\n\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 1), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n\n\nExample: Using pytest\ndef add(a, b):\n    return a + b\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n\n\nWhat is doctest?\n\ndoctest allows writing tests within docstrings.\nVerify code functionality directly in documentation.\n\n\n\nExample of doctest\ndef add(a, b):\n    \"\"\"\n    Add two numbers and return the result.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n\n    Returns:\n        int or float: The sum of `a` and `b`.\n\n    Examples:\n    &gt;&gt;&gt; add(2, 3)\n    5\n    &gt;&gt;&gt; add(1.5, 2.5)\n    4.0\n    \"\"\"\n    return a + b\n\n\nRunning doctest\n\nRun doctest using the following command:\n\n!python -m doctest -v your_script.py\n\n\nAdding doctest to Functions\n\nAdd doctest to the fetch_weather_data function in fetch_data.py.\n\n\n\nfetch_data.py with doctest\ndef fetch_weather_data(api_key, location):\n    \"\"\"\n    Fetch weather data from the OpenWeatherMap API.  \n    ... \n\n    Examples:\n    &gt;&gt;&gt; fetch_weather_data('invalid_api_key', 'London') is None\n    True\n    &gt;&gt;&gt; isinstance(fetch_weather_data('valid_api_key', 'London'), dict)\n    True\n    \"\"\"\n    url = ....\n    ...\n\n\nRunning doctests\n\nRun doctests using the following command:\n\n!python -m doctest -v scripts/fetch_data.py\n\n\nTesting Data Processing Functions\n\nAdd doctest to data processing functions to ensure correctness.\n\ndef convert_temp_kelvin_to_celsius(kelvin):\n    \"\"\"\n    Convert temperature from Kelvin to Celsius.\n    ... \n\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(273.15)\n    0.0\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(0)\n    -273.15\n    &gt;&gt;&gt; convert_temp_kelvin_to_celsius(373.15)\n    100.0\n    \"\"\"\n    return kelvin - 273.15\n\n\nRunning All doctests\n\nRun all doctests in the project using:\n\n!python -m doctest -v scripts/*.py\n\n\nIntegrating doctest into Your Workflow\n\nEnsure all functions have appropriate doctests.\nRun doctests regularly to verify functionality.\n\n\n\nHomework\n\nAdd more doctest cases to cover edge cases and different scenarios.\nExplore the official doctest documentation for more advanced usage.\n\n\n\nSummary\n\nLearned the importance of testing.\nWrote and ran tests using doctest.\nTested weather fetching and data processing functions.\n\n\n\nNext Sessions\n\nFocus on debugging\nAdd documentation\nDistribution methods"
  },
  {
    "objectID": "slides/04_visualising_data.html",
    "href": "slides/04_visualising_data.html",
    "title": "Plotting Magic: Visualizing Weather Data with Matplotlib",
    "section": "",
    "text": "Today\n\nIntroduce the importance of data visualisation in Python.\nLearn how to visualise weather data using Matplotlib\nUnderstand how to create basic plots to represent weather data\nCustomise plots to enhance readability and presentation\n\n\n\nWhy Visualise Data?\n\nSimplifies complex data\nIdentifies patterns and trends\nAids in decision-making\nEnhances data storytelling\nFacilitates better communication\n\n\n\nWhat is Data Visualisation?**\n\nVisual representation of data\nUses charts, graphs, and plots\nHelps in understanding data insights\n\n\n\nPopular Libraries in Python**\n\nMatplotlib: Highly customisable, widely used\nSeaborn: Built on Matplotlib, easier syntax\nPlotly: Interactive visualisations, web-based\nBokeh: Interactive plots, for web apps\nAltair: Declarative statistical visualisation\n\n\n\nWorkflow\n\nFind the data you want\nWhat story do you want to tell\nPick from the Python Graph Galley\nGet data (upload, wget, etc)\nImplement in notebook (or script)\n\n\n\nCommon Visualisation Roles\n\nShowing change over time\nShowing a part-to-whole composition\nLooking at how data is distributed\nComparing values between groups\nObserving relationships between variables\nLooking at geographical data\n\n\n\nPython Graph Gallery\n\n\n\nDashboard\n\n\n\nIntroduction to Matplotlib\n\nMatplotlib is a widely used Python library for creating static, animated, and interactive visualisations\nImport required libraries: import pandas as pd and import matplotlib.pyplot as plt\n\n\n\nReading Data\n\nRead processed weather data from the CSV file created in the previous session\n\nimport pandas as pd\ndf = pd.read_csv('data/processed/processed_weather_data.csv')\n\n\nCreating Basic Plots\n\nline plot for temperature\nbar plot for humidity\npie chart ofr weather description\nscatter plots temperature vs windspeed\n\n\n\nLine plot for temperature\nplt.plot(df['Location'], df['Temperature (C)'], marker='o')\nplt.title('Temperature by Location')\nplt.xlabel('Location')\nplt.ylabel('Temperature (°C)')\nplt.xticks(rotation=45)\nplt.grid(True)\nplt.show()\n\n\nBar plot for humidity\nplt.bar(df['Location'], df['Humidity (%)'], color='skyblue')\nplt.title('Humidity by Location')\nplt.xlabel('Location')\nplt.ylabel('Humidity (%)')\nplt.xticks(rotation=45)\nplt.show()\n\n\nPie chart for weather description\nweather_counts = df['Weather'].value_counts()\nplt.pie(weather_counts, labels=weather_counts.index, autopct='%1.1f%%', startangle=140)\nplt.title('Weather Description Distribution')\nplt.axis('equal')\nplt.show()`\n\n\nCustomising Plots\n\n\n\nAdding annotations\nplt.annotate(f'Max Temp: {max_temp:.2f}°C', xy=(max_temp_location, max_temp),\n                  xytext=(max_temp_location, max_temp+2), \n                  arrowprops=dict(facecolor='black', shrink=0.05))\n\n\nCustomising colors and styles\nplt.plot(df['Location'], df['Temperature (C)'], marker='o', linestyle='--', color='b')\nplt.title('Temperature by Location', fontsize=14, fontweight='bold')\nplt.xlabel('Location', fontsize=12)\nplt.ylabel('Temperature (°C)', fontsize=12)\nplt.xticks(rotation=45)\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.show()\n\n\nEffective Data Visualisation\n\nChoose the right type of chart\nMaintain clarity and simplicity\nUse colour wisely\nEnsure accuracy and precision\nTailor visualisations to the audience\n\n\n\nConclusion\n\nIn this session, we learned how to visualise weather data using Matplotlib\nWe created basic plots such as line plots, bar plots, and pie charts, and we customised these plots to improve readability and presentation\nNext session, we will focus on advanced data visualisation techniques using subplots and grids.\n\n\n\nHomework\n\nCreate additional plots to visualise other aspects of the weather data (e.g., wind speed, pressure)\nExperiment with different types of plots and customisations to enhance the visualisations"
  },
  {
    "objectID": "slides/12_deploying.html",
    "href": "slides/12_deploying.html",
    "title": "Ready, Set, Deploy: Share Your Python Magic",
    "section": "",
    "text": "Why Share Your Project? - Collaborate with others - Get feedback and contributions - Showcase your work"
  },
  {
    "objectID": "slides/12_deploying.html#usage",
    "href": "slides/12_deploying.html#usage",
    "title": "Ready, Set, Deploy: Share Your Python Magic",
    "section": "Usage",
    "text": "Usage\nfrom your_project import your_function\nresult = your_function()\nprint(result)"
  },
  {
    "objectID": "slides/12_deploying.html#features",
    "href": "slides/12_deploying.html#features",
    "title": "Ready, Set, Deploy: Share Your Python Magic",
    "section": "Features",
    "text": "Features\n\nFeature 1\nFeature 2"
  },
  {
    "objectID": "slides/12_deploying.html#license",
    "href": "slides/12_deploying.html#license",
    "title": "Ready, Set, Deploy: Share Your Python Magic",
    "section": "License",
    "text": "License\nMIT\n\n# Using PyInstaller\n\n**What is PyInstaller?**\n- Convert Python scripts into standalone executables\n- No need for users to install Python or dependencies\n\n**Installing PyInstaller**\n```bash\npip install pyinstaller"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Weather Dashboard Project: WeatherVista (天气景观 - Tiānqì jǐngguān)",
    "section": "",
    "text": "Slides\n\n\nExplore the world of Python programming with our engaging slides, designed to help you learn and retain information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotebooks\n\n\nDive deeper into Python programming with our interactive notebooks, featuring code snippets, examples, and exercises to help you master the material.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorksheets\n\n\nGet hands-on practice with our worksheets, designed to help you apply your Python skills to real-world scenarios.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuick Reference Guides\n\n\nStay on track with our quick reference guides, featuring concise summaries of key Python concepts and syntax.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "worksheets/homework-2.html",
    "href": "worksheets/homework-2.html",
    "title": "Understanding the Weather Dashboard Project: WeatherVista",
    "section": "",
    "text": "Welcome to the Weather Dashboard Project: WeatherVista! In this project, you will design and develop a web-based application that provides users with current weather conditions and temperature trends for a selected location. The Weather Dashboard will utilize the OpenWeatherMap API to fetch real-time weather data and display it in a user-friendly format.\nThe purpose of this worksheet is to help you understand the project objectives, target audience, technical requirements, and deliverables. By completing this worksheet, you will gain a deeper understanding of the project’s requirements and be able to break down the project into manageable tasks.\nWorksheet: Weather Dashboard Project: WeatherVista\nObjective: To understand the project objectives, target audience, technical requirements, and deliverables of the Weather Dashboard project.\nInstructions: Complete the following sections to demonstrate your understanding of the project.\nNote: This worksheet is designed to help you prepare for the project and ensure that you have a clear understanding of the requirements and objectives."
  },
  {
    "objectID": "worksheets/homework-2.html#introduction",
    "href": "worksheets/homework-2.html#introduction",
    "title": "Understanding the Weather Dashboard Project: WeatherVista",
    "section": "",
    "text": "Welcome to the Weather Dashboard Project: WeatherVista! In this project, you will design and develop a web-based application that provides users with current weather conditions and temperature trends for a selected location. The Weather Dashboard will utilize the OpenWeatherMap API to fetch real-time weather data and display it in a user-friendly format.\nThe purpose of this worksheet is to help you understand the project objectives, target audience, technical requirements, and deliverables. By completing this worksheet, you will gain a deeper understanding of the project’s requirements and be able to break down the project into manageable tasks.\nWorksheet: Weather Dashboard Project: WeatherVista\nObjective: To understand the project objectives, target audience, technical requirements, and deliverables of the Weather Dashboard project.\nInstructions: Complete the following sections to demonstrate your understanding of the project.\nNote: This worksheet is designed to help you prepare for the project and ensure that you have a clear understanding of the requirements and objectives."
  },
  {
    "objectID": "worksheets/homework-2.html#part-3-target-audience",
    "href": "worksheets/homework-2.html#part-3-target-audience",
    "title": "Understanding the Weather Dashboard Project: WeatherVista",
    "section": "Part 3: Target Audience",
    "text": "Part 3: Target Audience\n\nWho is the target audience for the Weather Dashboard application?\nHow will the Weather Dashboard benefit each of the target audience groups?"
  },
  {
    "objectID": "worksheets/homework-2.html#part-4-technical-requirements",
    "href": "worksheets/homework-2.html#part-4-technical-requirements",
    "title": "Understanding the Weather Dashboard Project: WeatherVista",
    "section": "Part 4: Technical Requirements",
    "text": "Part 4: Technical Requirements\n\nWhat programming language will be used to build the Weather Dashboard?\nWhat GUI framework will be used to build the Weather Dashboard?\nWhat API will be used to fetch weather data for the Weather Dashboard?"
  },
  {
    "objectID": "worksheets/homework-2.html#part-5-deliverables",
    "href": "worksheets/homework-2.html#part-5-deliverables",
    "title": "Understanding the Weather Dashboard Project: WeatherVista",
    "section": "Part 5: Deliverables",
    "text": "Part 5: Deliverables\n\nWhat are the deliverables for the Weather Dashboard project?\nWhat is the purpose of the written report and presentation?"
  },
  {
    "objectID": "worksheets/homework-2.html#part-6-breaking-down-the-project",
    "href": "worksheets/homework-2.html#part-6-breaking-down-the-project",
    "title": "Understanding the Weather Dashboard Project: WeatherVista",
    "section": "Part 6: Breaking Down the Project",
    "text": "Part 6: Breaking Down the Project\n\nWhat are the steps to break down the Weather Dashboard project into manageable tasks?\nWhat are the key functionalities that need to be included in the Weather Dashboard?"
  },
  {
    "objectID": "worksheets/homework-2.html#additional-questions",
    "href": "worksheets/homework-2.html#additional-questions",
    "title": "Understanding the Weather Dashboard Project: WeatherVista",
    "section": "Additional Questions",
    "text": "Additional Questions\n\nWhat are some potential challenges that may arise during the development of the Weather Dashboard?\nHow can you ensure that the Weather Dashboard meets the needs of the target audience?"
  },
  {
    "objectID": "quick-reference-guides/python-basics.html",
    "href": "quick-reference-guides/python-basics.html",
    "title": "Python Basics Cheat Sheet",
    "section": "",
    "text": "This cheat sheet is designed to help you get started with the basics of Python programming. Python is a high-level, interpreted programming language that is easy to learn and fun to use. With Python, you can create a wide range of programs, from simple scripts to complex applications.\n\n\nThis cheat sheet covers the basic syntax and features of Python, including:\n\nVariables and data types\nControl structures (if/else, for loops, while loops)\nFunctions\nImport statements\n\n\n\n\n\nUse this cheat sheet as a reference guide to help you learn the basics of Python.\nTry out the examples and exercises to practice your skills.\nUse this cheat sheet to review and reinforce your understanding of Python basics.\n\n\n\n\nOnce you’ve mastered the basics of Python, you can move on to more advanced topics, such as:\n\nFetching Data from APIs (Session 2): Learn how to fetch data from APIs using Python and the requests library.\nParsing JSON Data (Session 3): Learn how to parse JSON data using Python and the json library.\nBuilding the Weather Dashboard (Session 4): Use your new Python skills to build a basic weather dashboard.\n\nRemember, practice makes perfect! The more you practice, the better you’ll become at writing Python code.\nHappy coding!"
  },
  {
    "objectID": "quick-reference-guides/python-basics.html#welcome-to-the-python-basics-cheat-sheet",
    "href": "quick-reference-guides/python-basics.html#welcome-to-the-python-basics-cheat-sheet",
    "title": "Python Basics Cheat Sheet",
    "section": "",
    "text": "This cheat sheet is designed to help you get started with the basics of Python programming. Python is a high-level, interpreted programming language that is easy to learn and fun to use. With Python, you can create a wide range of programs, from simple scripts to complex applications.\n\n\nThis cheat sheet covers the basic syntax and features of Python, including:\n\nVariables and data types\nControl structures (if/else, for loops, while loops)\nFunctions\nImport statements\n\n\n\n\n\nUse this cheat sheet as a reference guide to help you learn the basics of Python.\nTry out the examples and exercises to practice your skills.\nUse this cheat sheet to review and reinforce your understanding of Python basics.\n\n\n\n\nOnce you’ve mastered the basics of Python, you can move on to more advanced topics, such as:\n\nFetching Data from APIs (Session 2): Learn how to fetch data from APIs using Python and the requests library.\nParsing JSON Data (Session 3): Learn how to parse JSON data using Python and the json library.\nBuilding the Weather Dashboard (Session 4): Use your new Python skills to build a basic weather dashboard.\n\nRemember, practice makes perfect! The more you practice, the better you’ll become at writing Python code.\nHappy coding!"
  },
  {
    "objectID": "quick-reference-guides/python-basics.html#variables",
    "href": "quick-reference-guides/python-basics.html#variables",
    "title": "Python Basics Cheat Sheet",
    "section": "Variables",
    "text": "Variables\n\nAssign a value to a variable using the assignment operator (=)\nUse the print() function to print the value of a variable\nUse the type() function to check the data type of a variable\n\nExample:\nx = 5  # assign the value 5 to the variable x\nprint(x)  # print the value of x\nprint(type(x))  # print the data type of x"
  },
  {
    "objectID": "quick-reference-guides/python-basics.html#data-types",
    "href": "quick-reference-guides/python-basics.html#data-types",
    "title": "Python Basics Cheat Sheet",
    "section": "Data Types",
    "text": "Data Types\n\nIntegers (int): whole numbers, e.g. 1, 2, 3, etc.\nFloats (float): decimal numbers, e.g. 3.14, -0.5, etc.\nStrings (str): sequences of characters, e.g. “hello”, ‘hello’, etc.\nBoolean (bool): true or false values\nLists (list): ordered collections of values, e.g. [1, 2, 3], [“a”, “b”, “c”], etc.\nTuples (tuple): ordered, immutable collections of values, e.g. (1, 2, 3), (“a”, “b”, “c”), etc."
  },
  {
    "objectID": "quick-reference-guides/python-basics.html#control-structures",
    "href": "quick-reference-guides/python-basics.html#control-structures",
    "title": "Python Basics Cheat Sheet",
    "section": "Control Structures",
    "text": "Control Structures\n\nConditional statements:\n\nif statement: execute a block of code if a condition is true\nelif statement: execute a block of code if a condition is true and the previous conditions are false\nelse statement: execute a block of code if none of the previous conditions are true\n\nLoops:\n\nfor loop: iterate over a sequence of values\nwhile loop: execute a block of code while a condition is true\n\n\nExample:\nx = 5\nif x &gt; 10:\n    print(\"x is greater than 10\")\nelif x == 5:\n    print(\"x is equal to 5\")\nelse:\n    print(\"x is less than 5\")"
  },
  {
    "objectID": "quick-reference-guides/python-basics.html#functions",
    "href": "quick-reference-guides/python-basics.html#functions",
    "title": "Python Basics Cheat Sheet",
    "section": "Functions",
    "text": "Functions\n\nDefine a function using the def keyword\nUse the return statement to return a value from a function\nCall a function by its name, passing in arguments as needed\n\nExample:\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\ngreet(\"John\")  # call the function with the argument \"John\""
  },
  {
    "objectID": "quick-reference-guides/python-basics.html#import-statements",
    "href": "quick-reference-guides/python-basics.html#import-statements",
    "title": "Python Basics Cheat Sheet",
    "section": "Import Statements",
    "text": "Import Statements\n\nUse the import statement to import a module or function from another file\nUse the from keyword to import specific functions or variables from a module\n\nExample:\nimport math\nprint(math.pi)  # print the value of pi\nfrom math import sin\nprint(sin(3.14))  # print the sine of 3.14\nThis is just a basic cheat sheet, and there is much more to learn about Python. But this should give you a good starting point for your Python jopurney!"
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html",
    "href": "quick-reference-guides/python-project-starter-kit.html",
    "title": "Python Project Starter Kit",
    "section": "",
    "text": "As a Python beginner, starting a new project can be overwhelming. With so many possibilities and options, it’s easy to get lost in the sea of code and best practices. That’s why we’ve created this Python Project Starter Kit - to help you get started with your Python project the right way.\nThis cheat sheet is designed to provide you with a comprehensive guide to creating a Python project, from setting up your project structure to writing clean and efficient code. Whether you’re a beginner or an experienced programmer, this kit will help you create a solid foundation for your project and ensure that you’re following best practices.\n\n\n\nGet started quickly: With this cheat sheet, you’ll be able to set up your project and start coding in no time.\nFollow best practices: By following the guidelines outlined in this cheat sheet, you’ll ensure that your project is well-structured and easy to maintain.\nImprove your coding skills: By following best practices, you’ll improve your coding skills and write more efficient and readable code.\nCollaborate with others: With a well-structured project, you’ll be able to collaborate with others more easily and effectively.\n\n\n\n\n\nProject structure: Learn how to set up your project directory and organize your files and folders.\nCode organization: Discover how to write clean and efficient code, and how to structure your code for readability and maintainability.\nBest practices: Get tips and tricks for writing Python code, from variable naming to commenting your code.\nTesting and debugging: Learn how to test and debug your code, and how to use tools like pdb and unittest.\n\nBy following this cheat sheet, you’ll be well on your way to creating a successful Python project. Happy coding!"
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html#welcome-to-the-python-project-starter-kit",
    "href": "quick-reference-guides/python-project-starter-kit.html#welcome-to-the-python-project-starter-kit",
    "title": "Python Project Starter Kit",
    "section": "",
    "text": "As a Python beginner, starting a new project can be overwhelming. With so many possibilities and options, it’s easy to get lost in the sea of code and best practices. That’s why we’ve created this Python Project Starter Kit - to help you get started with your Python project the right way.\nThis cheat sheet is designed to provide you with a comprehensive guide to creating a Python project, from setting up your project structure to writing clean and efficient code. Whether you’re a beginner or an experienced programmer, this kit will help you create a solid foundation for your project and ensure that you’re following best practices.\n\n\n\nGet started quickly: With this cheat sheet, you’ll be able to set up your project and start coding in no time.\nFollow best practices: By following the guidelines outlined in this cheat sheet, you’ll ensure that your project is well-structured and easy to maintain.\nImprove your coding skills: By following best practices, you’ll improve your coding skills and write more efficient and readable code.\nCollaborate with others: With a well-structured project, you’ll be able to collaborate with others more easily and effectively.\n\n\n\n\n\nProject structure: Learn how to set up your project directory and organize your files and folders.\nCode organization: Discover how to write clean and efficient code, and how to structure your code for readability and maintainability.\nBest practices: Get tips and tricks for writing Python code, from variable naming to commenting your code.\nTesting and debugging: Learn how to test and debug your code, and how to use tools like pdb and unittest.\n\nBy following this cheat sheet, you’ll be well on your way to creating a successful Python project. Happy coding!"
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html#project-structure",
    "href": "quick-reference-guides/python-project-starter-kit.html#project-structure",
    "title": "Python Project Starter Kit",
    "section": "Project Structure",
    "text": "Project Structure\n\nCreate a new directory for your project and navigate into it.\nCreate a src or scripts directory for your Python scripts.\nCreate a notebooks directory for your Jupyter Notebooks.\nCreate a requirements.txt file to manage dependencies.\nCreate a README.md file to describe your project."
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html#notebook-best-practices",
    "href": "quick-reference-guides/python-project-starter-kit.html#notebook-best-practices",
    "title": "Python Project Starter Kit",
    "section": "Notebook Best Practices",
    "text": "Notebook Best Practices\n\nUse meaningful notebook names.\nOrganize notebooks into sections (e.g., introduction, methods, results).\nUse clear and concise headings.\nUse Markdown for formatting.\nKeep notebooks concise and focused on a single idea."
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html#script-best-practices",
    "href": "quick-reference-guides/python-project-starter-kit.html#script-best-practices",
    "title": "Python Project Starter Kit",
    "section": "Script Best Practices",
    "text": "Script Best Practices\n\nUse meaningful script names.\nKeep scripts short and focused (e.g., &lt; 50 lines).\nUse clear and concise variable names.\nUse comments to explain code.\nTest scripts regularly using print statements or a testing framework."
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html#code-style",
    "href": "quick-reference-guides/python-project-starter-kit.html#code-style",
    "title": "Python Project Starter Kit",
    "section": "Code Style",
    "text": "Code Style\n\nUse a consistent coding style (e.g., PEP 8).\nUse meaningful variable names.\nUse type hints for function arguments and return types.\nUse consistent indentation (4 spaces).\nAvoid magic numbers; use named constants instead."
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html#testing",
    "href": "quick-reference-guides/python-project-starter-kit.html#testing",
    "title": "Python Project Starter Kit",
    "section": "Testing",
    "text": "Testing\n\nTest scripts regularly using print statements or a testing framework.\nUse a testing framework (e.g., unittest) for more complex scripts.\nTest for edge cases and error handling."
  },
  {
    "objectID": "quick-reference-guides/python-project-starter-kit.html#best-practices",
    "href": "quick-reference-guides/python-project-starter-kit.html#best-practices",
    "title": "Python Project Starter Kit",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse version control (e.g., Git) to track changes.\nUse a code editor with syntax highlighting.\nUse a linter (e.g., flake8) to catch errors.\nKeep your code organized and maintainable.\nCollaborate with others and ask for help when needed."
  },
  {
    "objectID": "quick-reference-guides/exception-handling.html",
    "href": "quick-reference-guides/exception-handling.html",
    "title": "Exception Handling in Python: A Comprehensive Guide",
    "section": "",
    "text": "Exception handling is an essential part of writing robust and reliable Python code. When an error occurs, Python’s exception handling mechanism allows you to catch and handle the exception, providing a way to recover from the error and continue executing your code. In this quick reference guide, we’ll explore the basics of exception handling in Python, including how to write try-except blocks, handle different types of exceptions, and log errors for debugging purposes.\nWhether you’re a beginner or an experienced Python developer, mastering exception handling is crucial for writing robust and maintainable code. With this quick reference guide, you’ll learn how to:\n\nWrite try-except blocks to catch and handle exceptions\nHandle different types of exceptions, such as ValueError, TypeError, and IOError\nLog errors for debugging purposes\nUse finally blocks to execute code regardless of whether an exception is thrown\nRethrow exceptions to propagate them up the call stack\n\nBy the end of this quick reference guide, you’ll be well-equipped to handle exceptions in your Python code and write more robust and reliable software.\nHere is a Python error handling quick reference guide:\nError Handling Basics\n\ntry: Used to enclose a block of code where errors might occur.\nexcept: Used to catch and handle errors.\nfinally: Used to execute code regardless of whether an exception was thrown or not.\n\nTry-Except Blocks\n\ntry-except block:\n\ntry:\n    # code that might raise an error\nexcept ExceptionType:\n    # code to handle the error\n\ntry-except-else block:\n\ntry:\n    # code that might raise an error\nexcept ExceptionType:\n    # code to handle the error\nelse:\n    # code to execute if no error occurs\n\ntry-except-finally block:\n\ntry:\n    # code that might raise an error\nexcept ExceptionType:\n    # code to handle the error\nfinally:\n    # code to execute regardless of whether an error occurred\nError Types\n\nException: The base class for all exceptions in Python.\nValueError: Raised when a function receives an invalid argument.\nTypeError: Raised when a function receives an argument of the wrong type.\nIOError: Raised when there is a problem with input/output operations.\nRuntimeError: Raised when a runtime error occurs.\n\nRaising Errors\n\nraise: Used to raise an exception.\n\nraise ExceptionType(\"error message\")\n\nraise with an argument:\n\nraise ExceptionType(\"error message\", arg1, arg2)\n\nraise with a value:\n\nraise ValueError(\"Invalid input\")\n\nraise with a message and a value:\n\nraise ValueError(\"Invalid input\", 42)\nError Handling Best Practices\n\nCatch specific exceptions instead of catching the general Exception class.\nLog errors instead of ignoring them.\nProvide a meaningful error message.\nHandle errors in a central location (e.g., in a try-except block) instead of spreading them throughout the code.\n\nCommon Error Handling Scenarios\n\nHandling a specific exception:\n\ntry:\n    # code that might raise an exception\nexcept ValueError:\n    # handle the ValueError\n\nHandling multiple exceptions:\n\ntry:\n    # code that might raise multiple exceptions\nexcept (ValueError, TypeError):\n    # handle the exceptions\n\nHandling an exception and re-raising it:\n\ntry:\n    # code that might raise an exception\nexcept ExceptionType:\n    # handle the exception\n    raise\n\nHandling an exception and logging it:\n\ntry:\n    # code that might raise an exception\nexcept ExceptionType:\n    # handle the exception\n    logging.error(\"Error occurred\")\nI hope this helps! Let me know if you have any questions or need further clarification."
  },
  {
    "objectID": "quick-reference-guides/exception-handling.html#introduction",
    "href": "quick-reference-guides/exception-handling.html#introduction",
    "title": "Exception Handling in Python: A Comprehensive Guide",
    "section": "",
    "text": "Exception handling is an essential part of writing robust and reliable Python code. When an error occurs, Python’s exception handling mechanism allows you to catch and handle the exception, providing a way to recover from the error and continue executing your code. In this quick reference guide, we’ll explore the basics of exception handling in Python, including how to write try-except blocks, handle different types of exceptions, and log errors for debugging purposes.\nWhether you’re a beginner or an experienced Python developer, mastering exception handling is crucial for writing robust and maintainable code. With this quick reference guide, you’ll learn how to:\n\nWrite try-except blocks to catch and handle exceptions\nHandle different types of exceptions, such as ValueError, TypeError, and IOError\nLog errors for debugging purposes\nUse finally blocks to execute code regardless of whether an exception is thrown\nRethrow exceptions to propagate them up the call stack\n\nBy the end of this quick reference guide, you’ll be well-equipped to handle exceptions in your Python code and write more robust and reliable software.\nHere is a Python error handling quick reference guide:\nError Handling Basics\n\ntry: Used to enclose a block of code where errors might occur.\nexcept: Used to catch and handle errors.\nfinally: Used to execute code regardless of whether an exception was thrown or not.\n\nTry-Except Blocks\n\ntry-except block:\n\ntry:\n    # code that might raise an error\nexcept ExceptionType:\n    # code to handle the error\n\ntry-except-else block:\n\ntry:\n    # code that might raise an error\nexcept ExceptionType:\n    # code to handle the error\nelse:\n    # code to execute if no error occurs\n\ntry-except-finally block:\n\ntry:\n    # code that might raise an error\nexcept ExceptionType:\n    # code to handle the error\nfinally:\n    # code to execute regardless of whether an error occurred\nError Types\n\nException: The base class for all exceptions in Python.\nValueError: Raised when a function receives an invalid argument.\nTypeError: Raised when a function receives an argument of the wrong type.\nIOError: Raised when there is a problem with input/output operations.\nRuntimeError: Raised when a runtime error occurs.\n\nRaising Errors\n\nraise: Used to raise an exception.\n\nraise ExceptionType(\"error message\")\n\nraise with an argument:\n\nraise ExceptionType(\"error message\", arg1, arg2)\n\nraise with a value:\n\nraise ValueError(\"Invalid input\")\n\nraise with a message and a value:\n\nraise ValueError(\"Invalid input\", 42)\nError Handling Best Practices\n\nCatch specific exceptions instead of catching the general Exception class.\nLog errors instead of ignoring them.\nProvide a meaningful error message.\nHandle errors in a central location (e.g., in a try-except block) instead of spreading them throughout the code.\n\nCommon Error Handling Scenarios\n\nHandling a specific exception:\n\ntry:\n    # code that might raise an exception\nexcept ValueError:\n    # handle the ValueError\n\nHandling multiple exceptions:\n\ntry:\n    # code that might raise multiple exceptions\nexcept (ValueError, TypeError):\n    # handle the exceptions\n\nHandling an exception and re-raising it:\n\ntry:\n    # code that might raise an exception\nexcept ExceptionType:\n    # handle the exception\n    raise\n\nHandling an exception and logging it:\n\ntry:\n    # code that might raise an exception\nexcept ExceptionType:\n    # handle the exception\n    logging.error(\"Error occurred\")\nI hope this helps! Let me know if you have any questions or need further clarification."
  },
  {
    "objectID": "quick-reference-guides/api_key_security.html",
    "href": "quick-reference-guides/api_key_security.html",
    "title": "API Key Security: Protecting Your Credentials",
    "section": "",
    "text": "In today’s world of interconnected services and cloud-based applications, APIs (Application Programming Interfaces) are crucial for enabling communication between different systems. Many of these APIs require an API key for authentication, providing access to their services. However, handling these API keys securely is vital to prevent unauthorized access and potential misuse.\nStoring API keys directly in your codebase or sharing them publicly on platforms like GitHub can expose your application to significant security risks. A better practice is to use environment variables to store API keys securely. This method ensures that sensitive information is kept out of your codebase and is not accidentally exposed.\nThis guide provides a quick reference on how to handle API keys securely by using environment variables. You will learn how to set up environment variables on different operating systems and how to access these variables in your Python code. By following these best practices, you can protect your credentials and maintain the security of your applications.\n\n\n\nSet Up Environment Variables: Store the API key in an environment variable on your local machine or server.\nRead Environment Variables in Your Code: Use Python’s os module to read the environment variable.\n\n\n\n\n\n\n\nWindows:\n\nOpen Command Prompt and run:\nsetx OPENWEATHER_API_KEY \"your_api_key_here\"\n\nMac/Linux:\n\nOpen Terminal and add the following line to your shell configuration file (e.g., .bashrc, .zshrc):\nexport OPENWEATHER_API_KEY=\"your_api_key_here\"\nThen, source the configuration file to apply the changes:\nsource ~/.bashrc  # or source ~/.zshrc\n\n\n\n\n\nCan we read the API key from the environment variable:\nimport os\n\n# Read API key from environment variable\nAPI_KEY = os.getenv('OPENWEATHER_API_KEY')\nif not API_KEY:\n    print(\"No API key found. Please set the OPENWEATHER_API_KEY environment variable.\")"
  },
  {
    "objectID": "quick-reference-guides/api_key_security.html#introduction",
    "href": "quick-reference-guides/api_key_security.html#introduction",
    "title": "API Key Security: Protecting Your Credentials",
    "section": "",
    "text": "In today’s world of interconnected services and cloud-based applications, APIs (Application Programming Interfaces) are crucial for enabling communication between different systems. Many of these APIs require an API key for authentication, providing access to their services. However, handling these API keys securely is vital to prevent unauthorized access and potential misuse.\nStoring API keys directly in your codebase or sharing them publicly on platforms like GitHub can expose your application to significant security risks. A better practice is to use environment variables to store API keys securely. This method ensures that sensitive information is kept out of your codebase and is not accidentally exposed.\nThis guide provides a quick reference on how to handle API keys securely by using environment variables. You will learn how to set up environment variables on different operating systems and how to access these variables in your Python code. By following these best practices, you can protect your credentials and maintain the security of your applications.\n\n\n\nSet Up Environment Variables: Store the API key in an environment variable on your local machine or server.\nRead Environment Variables in Your Code: Use Python’s os module to read the environment variable.\n\n\n\n\n\n\n\nWindows:\n\nOpen Command Prompt and run:\nsetx OPENWEATHER_API_KEY \"your_api_key_here\"\n\nMac/Linux:\n\nOpen Terminal and add the following line to your shell configuration file (e.g., .bashrc, .zshrc):\nexport OPENWEATHER_API_KEY=\"your_api_key_here\"\nThen, source the configuration file to apply the changes:\nsource ~/.bashrc  # or source ~/.zshrc\n\n\n\n\n\nCan we read the API key from the environment variable:\nimport os\n\n# Read API key from environment variable\nAPI_KEY = os.getenv('OPENWEATHER_API_KEY')\nif not API_KEY:\n    print(\"No API key found. Please set the OPENWEATHER_API_KEY environment variable.\")"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html",
    "href": "quick-reference-guides/tkinter.html",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "",
    "text": "This guide is designed to provide you with a concise and practical overview of Tkinter, Python’s standard GUI (Graphical User Interface) toolkit. Whether you’re a beginner looking to create your first interface or an experienced developer needing a quick refresher, this guide offers the essential information you need to build interactive and visually appealing applications.\nWhy Tkinter?\nTkinter is a powerful and flexible toolkit that comes bundled with Python, making it a convenient choice for developers across all platforms, including Windows, macOS, and Linux. Its simplicity and ease of use make it an ideal choice for rapid prototyping, integrating data visualisations, and developing custom tools.\nWhat Will You Learn?\nThis guide covers the fundamental aspects of Tkinter, including: - Setting up your Tkinter environment - Understanding and utilising essential widgets - Arranging widgets with layout managers - Handling events to make your GUI interactive - Incorporating advanced features like Matplotlib for data visualisation\nGetting Started\nWe start with the basics of setting up your Tkinter environment and progressively move towards building a functional GUI application. By the end of this guide, you will be equipped with the knowledge to create your own custom interfaces, making your Python applications more dynamic and user-friendly.\n\n\n\n\nPython’s standard GUI toolkit\nCross-platform (Windows, macOS, Linux)\nSimple to learn\n\n\n\n\n\nRapid prototyping of interfaces\nIntegrating data visualisations (e.g., Matplotlib)\nBuilding custom tools and applications"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#introduction-to-tkinter",
    "href": "quick-reference-guides/tkinter.html#introduction-to-tkinter",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "",
    "text": "This guide is designed to provide you with a concise and practical overview of Tkinter, Python’s standard GUI (Graphical User Interface) toolkit. Whether you’re a beginner looking to create your first interface or an experienced developer needing a quick refresher, this guide offers the essential information you need to build interactive and visually appealing applications.\nWhy Tkinter?\nTkinter is a powerful and flexible toolkit that comes bundled with Python, making it a convenient choice for developers across all platforms, including Windows, macOS, and Linux. Its simplicity and ease of use make it an ideal choice for rapid prototyping, integrating data visualisations, and developing custom tools.\nWhat Will You Learn?\nThis guide covers the fundamental aspects of Tkinter, including: - Setting up your Tkinter environment - Understanding and utilising essential widgets - Arranging widgets with layout managers - Handling events to make your GUI interactive - Incorporating advanced features like Matplotlib for data visualisation\nGetting Started\nWe start with the basics of setting up your Tkinter environment and progressively move towards building a functional GUI application. By the end of this guide, you will be equipped with the knowledge to create your own custom interfaces, making your Python applications more dynamic and user-friendly.\n\n\n\n\nPython’s standard GUI toolkit\nCross-platform (Windows, macOS, Linux)\nSimple to learn\n\n\n\n\n\nRapid prototyping of interfaces\nIntegrating data visualisations (e.g., Matplotlib)\nBuilding custom tools and applications"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#setting-up-your-tkinter-environment",
    "href": "quick-reference-guides/tkinter.html#setting-up-your-tkinter-environment",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Setting up Your Tkinter Environment",
    "text": "Setting up Your Tkinter Environment\n\nInstallation\n\nTkinter usually comes pre-installed with Python\nCheck with: import tkinter in your code\n\n\n\nBasic Structure\nimport tkinter as tk\nroot = tk.Tk()\nroot.mainloop()"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#widgets-the-building-blocks",
    "href": "quick-reference-guides/tkinter.html#widgets-the-building-blocks",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Widgets – The Building Blocks",
    "text": "Widgets – The Building Blocks\n\nWhat are Widgets?\n\nVisual elements of the GUI (buttons, labels, text boxes, etc.)\nEach widget is an object with properties and methods\n\n\n\nEssential Tkinter Widgets\n\nLabel (tk.Label): Displays text or images\nButton (tk.Button): Triggers actions when clicked\nEntry (tk.Entry): Single-line text input\nText (tk.Text): Multi-line text input\nCombobox (ttk.Combobox): Selection from a list\nFrame (tk.Frame): Container for organising widgets"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#layout-managers-arranging-widgets",
    "href": "quick-reference-guides/tkinter.html#layout-managers-arranging-widgets",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Layout Managers – Arranging Widgets",
    "text": "Layout Managers – Arranging Widgets\n\nWhy Layout Managers?\n\nPosition widgets automatically\nAdjust to different window sises\n\n\n\nCommon Layout Managers\n\nPack (pack): Simple, but less flexible\nGrid (grid): Table-like structure, more control\nPlace (place): Precise pixel placement (rarely needed)"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#event-handling-making-things-interactive",
    "href": "quick-reference-guides/tkinter.html#event-handling-making-things-interactive",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Event Handling – Making Things Interactive",
    "text": "Event Handling – Making Things Interactive\n\nWhat are Events?\n\nUser actions (clicks, key presses, etc.)\nTkinter uses a callback system\n\n\n\nBinding Functions to Events\nbutton.config(command=my_function)\nwidget.bind(\"&lt;Event&gt;\", my_function)  # e.g., &lt;Button-1&gt; for left click"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#adding-a-dropdown-menu-combobox",
    "href": "quick-reference-guides/tkinter.html#adding-a-dropdown-menu-combobox",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Adding a Dropdown Menu (Combobox)",
    "text": "Adding a Dropdown Menu (Combobox)\n\nFrom ttk Module\nfrom tkinter import ttk\n\n\nCreating the Combobox\ncombobox = ttk.Combobox(root, values=[...])\n\n\nHandling Selections\ncombobox.bind(\"&lt;&lt;ComboboxSelected&gt;&gt;\", my_function)"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#integrating-matplotlib",
    "href": "quick-reference-guides/tkinter.html#integrating-matplotlib",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Integrating Matplotlib",
    "text": "Integrating Matplotlib\n\nEmbedding in Tkinter\n\nUse FigureCanvasTkAgg from matplotlib.backends.backend_tkagg\n\n\n\nBasic Steps\n\nCreate a Matplotlib figure and axes\nDraw your plot\nEmbed the figure in a Tkinter canvas"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#example-application",
    "href": "quick-reference-guides/tkinter.html#example-application",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Example Application",
    "text": "Example Application\n\nCode Walkthrough\n\nCreate a Tkinter window\nAdd a dropdown, button, and canvas\nBind functions to handle button clicks and dropdown selections\nCreate a Matplotlib plot and display it in the canvas\n\n\n\nSample Code\nimport tkinter as tk\nfrom tkinter import ttk\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport matplotlib.pyplot as plt\n\ndef plot_graph():\n    fig, ax = plt.subplots()\n    ax.plot([1, 2, 3], [4, 5, 6])\n    canvas = FigureCanvasTkAgg(fig, master=root)\n    canvas.draw()\n    canvas.get_tk_widget().pack()\n\nroot = tk.Tk()\ncombobox = ttk.Combobox(root, values=[\"Option 1\", \"Option 2\"])\ncombobox.pack()\nbutton = tk.Button(root, text=\"Plot\", command=plot_graph)\nbutton.pack()\nroot.mainloop()"
  },
  {
    "objectID": "quick-reference-guides/tkinter.html#resources",
    "href": "quick-reference-guides/tkinter.html#resources",
    "title": "Tkinter Treasures: Your Path to Stunning Python Interfaces",
    "section": "Resources",
    "text": "Resources\n\nTkinter Documentation\nTkinter Tutorial"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html",
    "href": "quick-reference-guides/ipywidgets.html",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "",
    "text": "This guide is designed to provide you with a practical overview of ipywidgets, a powerful library that brings interactivity to Jupyter Notebooks. ipywidgets enables you to create interactive and dynamic user interfaces within your notebooks, making data exploration and visualisation more engaging and intuitive.\nWhy ipywidgets?\nipywidgets offers a rich set of controls, such as sliders, buttons, and dropdowns, which can be easily integrated into your Jupyter Notebooks. These interactive elements allow you to manipulate data and visualisations in real-time, enhancing your ability to analyse and present information effectively. Whether you’re a data scientist, researcher, educator, or student, ipywidgets provides the tools to make your notebooks more interactive and user-friendly.\nWhat Will You Learn?\nThis guide covers the fundamental aspects of using ipywidgets, including: - Setting up your ipywidgets environment - Utilising commonly used widgets - Handling widget events to create interactive behaviors - Arranging and styling widgets for better layouts - Leveraging the interact and interactive functions for quick interactivity - Creating a simple interactive plot using Matplotlib and ipywidgets\nGetting Started\nWe begin with the basics of installing and enabling ipywidgets in your Jupyter environment and progressively move towards building a functional interactive application. By the end of this guide, you will be equipped with the knowledge to create dynamic interfaces that make your data exploration and presentation more effective and enjoyable."
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#setting-up-ipywidgets",
    "href": "quick-reference-guides/ipywidgets.html#setting-up-ipywidgets",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Setting up ipywidgets",
    "text": "Setting up ipywidgets\n\nInstallation\npip install ipywidgets\n\n\nEnabling Widgets Extension\njupyter nbextension install --py widgetsnbextension\njupyter nbextension enable --py widgetsnbextension"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#basic-widgets",
    "href": "quick-reference-guides/ipywidgets.html#basic-widgets",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Basic Widgets",
    "text": "Basic Widgets\n\nCommonly Used Widgets\n\nIntSlider: ipywidgets.IntSlider()\nFloatSlider: ipywidgets.FloatSlider()\nIntRangeSlider: ipywidgets.IntRangeSlider()\nFloatRangeSlider: ipywidgets.FloatRangeSlider()\nDropdown: ipywidgets.Dropdown(options=['Option 1', 'Option 2'])\nText: ipywidgets.Text()\nButton: ipywidgets.Button(description='Click Me')\n\n\n\nDisplaying Widgets\nimport ipywidgets as widgets\nfrom IPython.display import display\n\nslider = widgets.IntSlider()\ndisplay(slider)"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#widget-events",
    "href": "quick-reference-guides/ipywidgets.html#widget-events",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Widget Events",
    "text": "Widget Events\n\nHandling Events\n\nButton Click\n\nbutton = widgets.Button(description='Click Me')\ndef on_button_click(b):\n    print(\"Button clicked!\")\nbutton.on_click(on_button_click)\ndisplay(button)\n\nSlider Value Change\n\nslider = widgets.IntSlider()\ndef on_value_change(change):\n    print(\"Slider value:\", change['new'])\nslider.observe(on_value_change, names='value')\ndisplay(slider)"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#layout-and-styling",
    "href": "quick-reference-guides/ipywidgets.html#layout-and-styling",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Layout and Styling",
    "text": "Layout and Styling\n\nArranging Widgets\n\nHBox and VBox\n\nhbox = widgets.HBox([widgets.Button(description='Button 1'), widgets.Button(description='Button 2')])\nvbox = widgets.VBox([widgets.IntSlider(), widgets.FloatSlider()])\ndisplay(hbox, vbox)\n\n\nCustomising Layouts\nbutton = widgets.Button(description='Click Me', layout=widgets.Layout(width='200px', height='50px'))\ndisplay(button)"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#interactive-functions",
    "href": "quick-reference-guides/ipywidgets.html#interactive-functions",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Interactive Functions",
    "text": "Interactive Functions\n\nUsing interact and interactive\n\ninteract\n\nfrom ipywidgets import interact\n\ndef f(x):\n    return x\ninteract(f, x=10)\ninteract(f, x='Hello')\ninteract(f, x=['Option 1', 'Option 2'])\n\ninteractive\n\nfrom ipywidgets import interactive\n\ndef g(a, b):\n    return a + b\ninteractive_plot = interactive(g, a=10, b=20)\ndisplay(interactive_plot)"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#example-application",
    "href": "quick-reference-guides/ipywidgets.html#example-application",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Example Application",
    "text": "Example Application\n\nCreating an Interactive Plot\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef plot_func(amplitude, frequency):\n    t = np.linspace(0, 1, 1000)\n    y = amplitude * np.sin(2 * np.pi * frequency * t)\n    plt.plot(t, y)\n    plt.show()\n\nwidgets.interact(plot_func, amplitude=(0, 10, 0.1), frequency=(1, 10, 0.1))"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#advanced-topics-optional",
    "href": "quick-reference-guides/ipywidgets.html#advanced-topics-optional",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Advanced Topics (Optional)",
    "text": "Advanced Topics (Optional)\n\nCustom Widget Development\nLinking Widgets\n\nslider = widgets.FloatSlider()\ntext = widgets.FloatText()\nwidgets.jslink((slider, 'value'), (text, 'value'))\ndisplay(slider, text)"
  },
  {
    "objectID": "quick-reference-guides/ipywidgets.html#resources",
    "href": "quick-reference-guides/ipywidgets.html#resources",
    "title": "Widget Wisardry: Enhancing Jupyter Notebooks with ipywidgets",
    "section": "Resources",
    "text": "Resources\n\nipywidgets Documentation\nJupyter Widgets Examples"
  },
  {
    "objectID": "quick-reference-guides/weather-dashboard-project-overview.html",
    "href": "quick-reference-guides/weather-dashboard-project-overview.html",
    "title": "Weather Dashboard Project: WeatherVista (天气景观 - Tiānqì jǐngguān)",
    "section": "",
    "text": "Project Overview\nThe Weather Dashboard project is designed to create a web application that displays current weather conditions and temperature trends for a chosen location. This application will use the OpenWeatherMap API to fetch real-time weather data, ensuring users have access to up-to-date information presented in an easy-to-understand format. This project aims to create a web-based application that provides users with current weather conditions and temperature trends for a selected location, utilising the OpenWeatherMap API to fetch weather data and display it in a user-friendly format.\n\n\nProject Objectives\nThe main goals of the Weather Dashboard project are to design and develop a dashboard that:\n\nDisplays Current Weather Conditions: Shows the temperature, humidity, wind speed, and cloud cover for the selected location.\nProvides Temperature Trends: Displays temperature trends for the current day and the next five days.\nOffers a 3 and 5-Day Forecast: Includes date, time, and a brief weather description for the upcoming five days.\nLocation Selection: Allows users to choose a location from a list of cities or enter a custom location.\nUnit Switching: Provides options to switch between Celsius and Fahrenheit units.\nError Handling: Manages API errors by displaying a relevant message if the API request fails.\n\n\n\nTarget Audience\nThe Weather Dashboard is intended for anyone who wants to stay informed about the weather in their area, including:\n\nCommuters: Individuals planning their daily routes based on weather conditions.\nOutdoor Enthusiasts: People organising outdoor activities depending on the weather forecast.\nTravelers: Individuals needing to know what weather to expect at their destination.\nHomeowners: Residents wanting to stay aware of local weather conditions.\n\n\n\nTechnical Requirements\nTo build the Weather Dashboard, the project will use the following technical requirements:\n\nProgramming Language: Python\nGUI Framework: Tkinter (Tk)\nAPI Integration: OpenWeatherMap API\n\n\n\nDeliverables\nThe project will produce:\n\nFully Functional Weather Dashboard: A web application that meets both functional and non-functional requirements.\nWritten Report: Documentation detailing the design and implementation decisions made during the project.\nPresentation: A summary presentation highlighting the project and its outcomes.\n\n\n\nBreaking Down the Project into Steps\n\nUnderstand the Objectives: Clearly define what the weather dashboard needs to accomplish.\nIdentify Key Functionalities: List out the main features the application should have (e.g., displaying weather conditions, providing forecasts, location selection, unit switching, error handling).\nDetermine the Technical Requirements: Choose the appropriate programming language, GUI framework, and API.\nDefine the Target Audience: Understand who will be using the application and tailor the functionalities to meet their needs.\nPlan Deliverables: Outline what needs to be delivered by the end of the project (functional dashboard, report, presentation).\nSet a Timeline: Establish a timeline with milestones to ensure steady progress.\n\nBy following these steps, you can break down the Weather Dashboard project into manageable tasks, ensuring you cover all necessary functionalities and deliver a complete and functional application."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html",
    "href": "quick-reference-guides/input-validation.html",
    "title": "Python Input Validation quick reference guide",
    "section": "",
    "text": "Validating user input is a crucial step in building robust and secure software applications. In Python, validating user input can help prevent common web application security vulnerabilities such as SQL injection and cross-site scripting (XSS). This quick reference guide provides a quick reference guide to the most commonly used input validation techniques in Python."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#introduction",
    "href": "quick-reference-guides/input-validation.html#introduction",
    "title": "Python Input Validation quick reference guide",
    "section": "",
    "text": "Validating user input is a crucial step in building robust and secure software applications. In Python, validating user input can help prevent common web application security vulnerabilities such as SQL injection and cross-site scripting (XSS). This quick reference guide provides a quick reference guide to the most commonly used input validation techniques in Python."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#why-validate-user-input",
    "href": "quick-reference-guides/input-validation.html#why-validate-user-input",
    "title": "Python Input Validation quick reference guide",
    "section": "Why Validate User Input?",
    "text": "Why Validate User Input?\nValidating user input is essential for several reasons:\n\nPrevent Security Vulnerabilities: Validating user input can help prevent common web application security vulnerabilities such as SQL injection and cross-site scripting (XSS).\nEnsure Data Integrity: Validating user input ensures that the data entered by users is accurate and consistent, reducing the risk of errors and inconsistencies.\nImprove User Experience: Validating user input can improve the user experience by providing immediate feedback to users about invalid input, reducing the likelihood of errors and frustration."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#whats-in-this-quick-reference-guide",
    "href": "quick-reference-guides/input-validation.html#whats-in-this-quick-reference-guide",
    "title": "Python Input Validation quick reference guide",
    "section": "What’s in this quick reference guide?",
    "text": "What’s in this quick reference guide?\nThis quick reference guide provides a comprehensive guide to input validation in Python, covering:\n\nString validation techniques\nInteger and float validation techniques\nBoolean validation techniques\nEmail and phone number validation techniques\nDate and password validation techniques\nRegular expressions for advanced input validation\n\nThis quick reference guide provides the essential knowledge you need to validate user input effectively and securely in Python."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#string-validation",
    "href": "quick-reference-guides/input-validation.html#string-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "String Validation",
    "text": "String Validation\n\nstr.isalpha(): Returns True if the string contains only letters.\nstr.isalnum(): Returns True if the string contains only letters and numbers.\nstr.isdigit(): Returns True if the string contains only digits.\nstr.islower(): Returns True if the string contains only lowercase letters.\nstr.isupper(): Returns True if the string contains only uppercase letters.\nstr.strip(): Removes leading and trailing whitespace from the string.\nstr.replace(): Replaces a specified phrase with another string."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#integer-validation",
    "href": "quick-reference-guides/input-validation.html#integer-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "Integer Validation",
    "text": "Integer Validation\n\nint.isdigit(): Returns True if the string contains only digits.\nint.isnumeric(): Returns True if the string contains only digits and is a valid integer.\nint(int_value): Converts a string to an integer."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#float-validation",
    "href": "quick-reference-guides/input-validation.html#float-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "Float Validation",
    "text": "Float Validation\n\nfloat.isdigit(): Returns True if the string contains only digits.\nfloat.isnumeric(): Returns True if the string contains only digits and is a valid float.\nfloat(float_value): Converts a string to a float."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#boolean-validation",
    "href": "quick-reference-guides/input-validation.html#boolean-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "Boolean Validation",
    "text": "Boolean Validation\n\nbool(bool_value): Converts a string to a boolean value."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#email-validation",
    "href": "quick-reference-guides/input-validation.html#email-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "Email Validation",
    "text": "Email Validation\n\nre.match(r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\", email): Regular expression to validate an email address."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#phone-number-validation",
    "href": "quick-reference-guides/input-validation.html#phone-number-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "Phone Number Validation",
    "text": "Phone Number Validation\n\nre.match(r\"^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$\", phone_number): Regular expression to validate a phone number."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#date-validation",
    "href": "quick-reference-guides/input-validation.html#date-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "Date Validation",
    "text": "Date Validation\n\ndatetime.datetime.strptime(date_string, \"%Y-%m-%d\"): Converts a string to a datetime object."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#password-validation",
    "href": "quick-reference-guides/input-validation.html#password-validation",
    "title": "Python Input Validation quick reference guide",
    "section": "Password Validation",
    "text": "Password Validation\n\nre.match(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{8,20}$\", password): Regular expression to validate a password.\n\nRegular expressions can be confusing for beginners. Here’s an alternative using the pyinputplus library, which provides a simpler way to validate user input:"
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#install-pyinputplus",
    "href": "quick-reference-guides/input-validation.html#install-pyinputplus",
    "title": "Python Input Validation quick reference guide",
    "section": "Install pyinputplus",
    "text": "Install pyinputplus\nYou can install pyinputplus using pip:\npip install pyinputplus"
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#validate-user-input-using-pyinputplus",
    "href": "quick-reference-guides/input-validation.html#validate-user-input-using-pyinputplus",
    "title": "Python Input Validation quick reference guide",
    "section": "Validate User Input using pyinputplus",
    "text": "Validate User Input using pyinputplus\nHere’s an example of how to use pyinputplus to validate user input:\nimport pyinputplus as p\n\n# Get user input\nusername = p.inputStr(\"Enter your username: \")\n\n# Validate username\nif not username.isalnum():\n    print(\"Invalid username. Please enter a valid username.\")\nelse:\n    print(\"Valid username!\")\nIn this example, pyinputplus provides a simple way to get user input using the inputStr() function. The isalnum() method is used to validate the username, which checks if the input contains only alphanumeric characters."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#alternative-to-regular-expressions",
    "href": "quick-reference-guides/input-validation.html#alternative-to-regular-expressions",
    "title": "Python Input Validation quick reference guide",
    "section": "Alternative to Regular Expressions",
    "text": "Alternative to Regular Expressions\nHere’s an example of how to use pyinputplus to validate an email address:\nimport pyinputplus as p\n\n# Get user input\nemail = p.inputStr(\"Enter your email address: \")\n\n# Validate email\nif \"@\" in email and \".\" in email:\n    print(\"Valid email!\")\nelse:\n    print(\"Invalid email. Please enter a valid email address.\")\nIn this example, pyinputplus provides a simple way to validate an email address by checking if the input contains an @ symbol and a dot (.)."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#advantages-of-pyinputplus",
    "href": "quick-reference-guides/input-validation.html#advantages-of-pyinputplus",
    "title": "Python Input Validation quick reference guide",
    "section": "Advantages of pyinputplus",
    "text": "Advantages of pyinputplus\n\nSimplifies input validation: pyinputplus provides a simple way to validate user input, making it easier for beginners to validate user input.\nReduces the need for regular expressions: pyinputplus provides a simpler way to validate input, reducing the need for complex regular expressions.\nProvides a more intuitive API: pyinputplus provides a more intuitive API, making it easier for beginners to use.\n\nKeep in mind that pyinputplus is a simple library, and it’s not suitable for complex input validation. For more complex validation, you may still need to use regular expressions."
  },
  {
    "objectID": "quick-reference-guides/input-validation.html#common-validation-functions",
    "href": "quick-reference-guides/input-validation.html#common-validation-functions",
    "title": "Python Input Validation quick reference guide",
    "section": "Common Validation Functions",
    "text": "Common Validation Functions\n\nstr.strip(): Removes leading and trailing whitespace from a string.\nstr.replace(): Replaces a specified phrase with another string.\n\nYou can use these methods to validate user input and ensure that it meets certain criteria. For example, you can use str.isalpha() to check if a string contains only letters, or int.isdigit() to check if a string contains only digits.\nRemember to always validate user input to prevent common web application security vulnerabilities like SQL injection and cross-site scripting (XSS)."
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html",
    "href": "quick-reference-guides/openweathermap.html",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "",
    "text": "As a developer, you’re likely no stranger to the world of APIs. But when it comes to the OpenWeatherMap API, it can be overwhelming to navigate the vast array of endpoints, parameters, and responses. That’s where this quick reference guide comes in.\nIn this comprehensive guide, we’ll take you on a journey through the OpenWeatherMap API, covering everything from the basics of authentication to the intricacies of weather forecasting. Whether you’re a seasoned developer or just starting out, this quick reference guide is designed to help you master the OpenWeatherMap API and unlock the secrets of the weather.\n\n\nThis quick reference guide covers the following topics:\n\nAPI Endpoints: Learn about the different endpoints available in the OpenWeatherMap API, including current weather conditions, 5-day forecasts, and more.\nAPI Parameters: Discover the various parameters you can use to customize your API requests, such as units of measurement, language, and more.\nAPI Responses: Get a breakdown of the different response formats and data structures you can expect from the OpenWeatherMap API.\nError Handling: Learn how to handle common errors and exceptions when working with the OpenWeatherMap API.\nTips and Tricks: Get insider tips and tricks for optimizing your API requests and working with the OpenWeatherMap API."
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#welcome-to-the-openweathermap-api-quick-reference-guide",
    "href": "quick-reference-guides/openweathermap.html#welcome-to-the-openweathermap-api-quick-reference-guide",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "",
    "text": "As a developer, you’re likely no stranger to the world of APIs. But when it comes to the OpenWeatherMap API, it can be overwhelming to navigate the vast array of endpoints, parameters, and responses. That’s where this quick reference guide comes in.\nIn this comprehensive guide, we’ll take you on a journey through the OpenWeatherMap API, covering everything from the basics of authentication to the intricacies of weather forecasting. Whether you’re a seasoned developer or just starting out, this quick reference guide is designed to help you master the OpenWeatherMap API and unlock the secrets of the weather.\n\n\nThis quick reference guide covers the following topics:\n\nAPI Endpoints: Learn about the different endpoints available in the OpenWeatherMap API, including current weather conditions, 5-day forecasts, and more.\nAPI Parameters: Discover the various parameters you can use to customize your API requests, such as units of measurement, language, and more.\nAPI Responses: Get a breakdown of the different response formats and data structures you can expect from the OpenWeatherMap API.\nError Handling: Learn how to handle common errors and exceptions when working with the OpenWeatherMap API.\nTips and Tricks: Get insider tips and tricks for optimizing your API requests and working with the OpenWeatherMap API."
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#who-is-this-quick-reference-guide-for",
    "href": "quick-reference-guides/openweathermap.html#who-is-this-quick-reference-guide-for",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "Who is this quick reference guide For?",
    "text": "Who is this quick reference guide For?\nThis quick reference guide is designed for anyone who wants to get the most out of the OpenWeatherMap API. Whether you’re a:\n\nDeveloper looking to integrate weather data into your app or website\nResearcher seeking to analyze weather patterns and trends\nWeather enthusiast curious about the inner workings of the OpenWeatherMap API\n\nThis quick reference guide is for you.\nSo, let’s get started and dive into the world of OpenWeatherMap API!"
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#api-endpoints",
    "href": "quick-reference-guides/openweathermap.html#api-endpoints",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "API Endpoints",
    "text": "API Endpoints\n\napi.openweathermap.org/data/2.5/weather: Current weather conditions\napi.openweathermap.org/data/2.5/forecast: 5-day forecast\napi.openweathermap.org/data/2.5/onecall: Current weather conditions and 5-day forecast"
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#api-parameters",
    "href": "quick-reference-guides/openweathermap.html#api-parameters",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "API Parameters",
    "text": "API Parameters\n\nq: City name or zip code (required)\nunits: Units of measurement (imperial or metric)\nlang: Language for weather descriptions (en, fr, es, etc.)\nappid: Your OpenWeatherMap API key (required)"
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#api-requests",
    "href": "quick-reference-guides/openweathermap.html#api-requests",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "API Requests",
    "text": "API Requests\n\nGET /weather: Retrieve current weather conditions\n\nExample: https://api.openweathermap.org/data/2.5/weather?q=London&appid=YOUR_API_KEY\n\nGET /forecast: Retrieve 5-day forecast\n\nExample: https://api.openweathermap.org/data/2.5/forecast?q=London&appid=YOUR_API_KEY\n\nGET /onecall: Retrieve current weather conditions and 5-day forecast\n\nExample: https://api.openweathermap.org/data/2.5/onecall?q=London&appid=YOUR_API_KEY"
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#api-response",
    "href": "quick-reference-guides/openweathermap.html#api-response",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "API Response",
    "text": "API Response\n\nweather: Current weather conditions\n\nmain: Weather condition (e.g. “Clouds”)\ndescription: Weather description (e.g. “overcast clouds”)\nicon: Weather icon (e.g. “04d”)\n\nforecast: 5-day forecast\n\nlist: Array of forecast data\n\ndt: Timestamp (Unix epoch)\nmain: Weather condition (e.g. “Clouds”)\ndescription: Weather description (e.g. “overcast clouds”)\nicon: Weather icon (e.g. “04d”)\n\n\ncurrent: Current weather conditions\n\ntemp: Temperature (in Kelvin)\nhumidity: Humidity (percentage)\nwind_speed: Wind speed (m/s)\nwind_deg: Wind direction (degrees)"
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#error-handling",
    "href": "quick-reference-guides/openweathermap.html#error-handling",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "Error Handling",
    "text": "Error Handling\n\nHTTP 404: City not found\nHTTP 401: Invalid API key\nHTTP 500: Internal server error"
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#tips-and-tricks",
    "href": "quick-reference-guides/openweathermap.html#tips-and-tricks",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "Tips and Tricks",
    "text": "Tips and Tricks\n\nUse the appid parameter to authenticate your API requests\nUse the units parameter to specify the units of measurement (imperial or metric)\nUse the lang parameter to specify the language for weather descriptions\nUse the q parameter to specify the city name or zip code\nUse the forecast endpoint to retrieve a 5-day forecast\nUse the onecall endpoint to retrieve current weather conditions and 5-day forecast"
  },
  {
    "objectID": "quick-reference-guides/openweathermap.html#api-key",
    "href": "quick-reference-guides/openweathermap.html#api-key",
    "title": "A Guide to the OpenWeatherMap API",
    "section": "API Key",
    "text": "API Key\n\nSign up for a free API key on the OpenWeatherMap website\nUse your API key in the appid parameter of your API requests\n\nI hope this quick reference guide helps you get started with the OpenWeatherMap API!"
  },
  {
    "objectID": "quick-reference-guides/weather-dashboard-setup-guide.html",
    "href": "quick-reference-guides/weather-dashboard-setup-guide.html",
    "title": "Weather Dashboard Project Setup Guide",
    "section": "",
    "text": "Welcome to the Weather Dashboard project! This guide will walk you through the initial setup of your project folder, creating a new Python environment, and setting up your GitHub repository. By following these steps, you’ll establish a strong foundation for developing your Weather Dashboard app, ensuring your project is well-organised and version-controlled."
  },
  {
    "objectID": "quick-reference-guides/weather-dashboard-setup-guide.html#introduction",
    "href": "quick-reference-guides/weather-dashboard-setup-guide.html#introduction",
    "title": "Weather Dashboard Project Setup Guide",
    "section": "",
    "text": "Welcome to the Weather Dashboard project! This guide will walk you through the initial setup of your project folder, creating a new Python environment, and setting up your GitHub repository. By following these steps, you’ll establish a strong foundation for developing your Weather Dashboard app, ensuring your project is well-organised and version-controlled."
  },
  {
    "objectID": "quick-reference-guides/weather-dashboard-setup-guide.html#project-overview",
    "href": "quick-reference-guides/weather-dashboard-setup-guide.html#project-overview",
    "title": "Weather Dashboard Project Setup Guide",
    "section": "Project Overview",
    "text": "Project Overview\nIn this project, you’ll be creating a Weather Dashboard application that retrieves and displays weather data using the requests package and the openweathermap api. You’ll learn how to structure your project, manage dependencies, and use Git and GitHub for version control. This setup guide is designed to help you get started quickly and efficiently.\n\nObjectives\n\nCreate and structure your project folder: Organise your project files into a logical structure with subfolders for notebooks, scripts, documentation, and tests.\nSet up a Python environment: Ensure you have an isolated environment for your project with the necessary dependencies installed.\nInitialise a GitHub repository: Learn how to create a remote repository, clone it locally, and synchronise your work with GitHub.\n\nBy the end of this guide, you will have a fully functional project setup that is ready for development. Let’s get started!"
  },
  {
    "objectID": "quick-reference-guides/weather-dashboard-setup-guide.html#step-by-step-instructions",
    "href": "quick-reference-guides/weather-dashboard-setup-guide.html#step-by-step-instructions",
    "title": "Weather Dashboard Project Setup Guide",
    "section": "Step-by-Step Instructions",
    "text": "Step-by-Step Instructions\nFollow these detailed steps to set up your Weather Dashboard project:\nStep 1: Create a GitHub repository\n\nGo to the GitHub website and create a new repository.\nName the repository something like “weather-dashboard”.\nInitialise the repository with a README file and a LICENSE file.\n\nStep 2: Clone the GitHub repository\n\nOpen a terminal or command prompt and navigate to the directory where you want to clone your repository.\nClone the GitHub repository to your local machine by running the following command:\ngit clone https://github.com/your-username/weather-dashboard.git\nNavigate to the cloned repository by running the following command:\ncd weather-dashboard\n\nStep 3: Create the project folder structure\n\nInside the cloned repository, create the following subfolders:\nmkdir notebooks scripts docs tests\n\nStep 4: Create a new Python environment\n\nCreate a new Python environment by running the following command:\nconda create --name weather-dashboard-env python=3.12\nActivate the new environment by running the following command:\nconda activate weather-dashboard-env\n\nStep 5: Create a requirements.txt file\n\nInside the project folder, create a new file called requirements.txt.\nOpen the file and add the following line:\nrequests==2.25.1\n(or the latest version you need)\nSave the file.\n\nStep 6: Install packages\n\nActivate the new environment if not already activated by running the following command:\nconda activate weather-dashboard-env\nInstall the packages listed in the requirements.txt file by running the following command:\npip install -r requirements.txt\n\nStep 7: Set up the workflow\n\nAdd all the files in the project folder to the Git repository by running the following command:\ngit add .\nCommit the changes by running the following command:\ngit commit -m \"Initial commit\"\nPush the changes to the GitHub repository by running the following command:\ngit push -u origin master\nFrom now on, you can work locally, make changes, and commit them to the GitHub repository by running the following commands:\ngit add .\ngit commit -m \"commit message\"\n\nStep 8: Create a README and LICENSE file\n\nInside the project folder, create a new file called README.md and add a brief description of your project.\nInside the project folder, create a new file called LICENSE and add the license terms for your project.\n\nBy following these steps, students should have a basic setup for their Weather Dashboard app project, including a new Python environment, a requirements.txt file, and a GitHub repository."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html",
    "href": "quick-reference-guides/git-basics.html",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "",
    "text": "As a Python programmer, you’re likely familiar with the importance of version control in managing your code. Git and GitHub are two powerful tools that can help you track changes, collaborate with others, and share your work with the world. But getting started with Git and GitHub can be overwhelming, especially for beginners.\nThat’s why we’ve created this cheat sheet: to provide a concise and easy-to-follow guide to the basics of Git and GitHub. Whether you’re new to version control or just need a refresher, this cheat sheet is designed to help you quickly get up to speed with the essential commands and concepts you need to know.\nIn this cheat sheet, you’ll find a comprehensive overview of the key Git and GitHub commands, as well as some helpful tips and best practices for using these tools effectively. Whether you’re working on a personal project or collaborating with a team, this cheat sheet is designed to help you streamline your workflow and get the most out of Git and GitHub.\nSo let’s get started!"
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#welcome-to-the-git-and-github-cheat-sheet",
    "href": "quick-reference-guides/git-basics.html#welcome-to-the-git-and-github-cheat-sheet",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "",
    "text": "As a Python programmer, you’re likely familiar with the importance of version control in managing your code. Git and GitHub are two powerful tools that can help you track changes, collaborate with others, and share your work with the world. But getting started with Git and GitHub can be overwhelming, especially for beginners.\nThat’s why we’ve created this cheat sheet: to provide a concise and easy-to-follow guide to the basics of Git and GitHub. Whether you’re new to version control or just need a refresher, this cheat sheet is designed to help you quickly get up to speed with the essential commands and concepts you need to know.\nIn this cheat sheet, you’ll find a comprehensive overview of the key Git and GitHub commands, as well as some helpful tips and best practices for using these tools effectively. Whether you’re working on a personal project or collaborating with a team, this cheat sheet is designed to help you streamline your workflow and get the most out of Git and GitHub.\nSo let’s get started!"
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#what-is-git",
    "href": "quick-reference-guides/git-basics.html#what-is-git",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "What is Git?",
    "text": "What is Git?\nGit is a free and open-source tool that helps you manage and track changes to your code. It’s like a digital notebook where you can save and organize your work."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#what-is-github",
    "href": "quick-reference-guides/git-basics.html#what-is-github",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "What is GitHub?",
    "text": "What is GitHub?\nGitHub is a website where you can store and share your Git projects. It’s like a big library where you can store and share your code with others."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#key-git-commands",
    "href": "quick-reference-guides/git-basics.html#key-git-commands",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "Key Git Commands:",
    "text": "Key Git Commands:\n\ngit init: Initializes a new Git repository in your project directory.\ngit add : Adds a new file to the Git repository.\ngit commit -m “commit message”: Saves changes to the repository with a brief description.\ngit log: Shows a history of all commits made to the repository.\ngit status: Checks the status of the repository, showing which files have changed.\ngit push: Sends changes from your local repository to the GitHub repository.\ngit pull: Fetches changes from the GitHub repository and merges them with your local changes."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#key-github-concepts",
    "href": "quick-reference-guides/git-basics.html#key-github-concepts",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "Key GitHub Concepts:",
    "text": "Key GitHub Concepts:\n\nRepository (Repo): A collection of files and folders stored on GitHub.\nBranch: A separate version of your repository, allowing you to work on different features or fixes.\nCommit: A snapshot of your changes, saved to the repository.\nPull Request: A request to merge changes from one branch to another."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#basic-git-workflow",
    "href": "quick-reference-guides/git-basics.html#basic-git-workflow",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "Basic Git Workflow:",
    "text": "Basic Git Workflow:\n\nCreate a new repository: Initialize a new Git repository in your project directory using git init.\nMake changes: Edit files and add new ones to your project.\nCommit changes: Save changes to the repository using git commit -m \"commit message\".\nPush changes: Send changes to the GitHub repository using git push.\nPull changes: Fetch changes from the GitHub repository and merge them with your local changes using git pull."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#tips-and-tricks",
    "href": "quick-reference-guides/git-basics.html#tips-and-tricks",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "Tips and Tricks:",
    "text": "Tips and Tricks:\n\nAlways commit changes regularly to avoid losing work.\nUse descriptive commit messages to help track changes.\nUse git status to check the status of your repository.\nUse git log to view the history of commits.\nUse git pull and git push to synchronize your local and remote repositories."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#common-mistakes",
    "href": "quick-reference-guides/git-basics.html#common-mistakes",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "Common Mistakes:",
    "text": "Common Mistakes:\n\nForgetting to commit changes before pushing to GitHub.\nNot using descriptive commit messages.\nNot pulling changes from the remote repository regularly."
  },
  {
    "objectID": "quick-reference-guides/git-basics.html#additional-resources",
    "href": "quick-reference-guides/git-basics.html#additional-resources",
    "title": "Git and GitHub Cheat Sheet: Essential Commands and Concepts",
    "section": "Additional Resources:",
    "text": "Additional Resources:\n\nGitHub’s official Git tutorial: https://guides.github.com/activities/hello-world/\nGit documentation: https://git-scm.com/docs\n\nRemember, practice makes perfect! Start experimenting with Git and GitHub to become more comfortable with the basics."
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html",
    "href": "quick-reference-guides/json-quick-reference.html",
    "title": "JSON in Python: A Quick Reference",
    "section": "",
    "text": "Working with JSON (JavaScript Object Notation) data in Python is a crucial skill for any developer. JSON is a lightweight, human-readable data format that is widely used for data exchange between web servers, web applications, and mobile apps. In Python, the json module provides a simple and efficient way to work with JSON data. Whether you’re building a web scraper, a data analysis tool, or a web application, understanding how to work with JSON in Python is essential.\nThis quick reference guide provides a quick reference guide to the most commonly used functions and methods for working with JSON data in Python. From converting Python objects to JSON and parsing JSON data, to handling errors and best practices, this quick reference guide covers it all. Whether you’re a beginner or an experienced developer, this quick reference guide will help you master the basics of working with JSON in Python."
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html#introduction",
    "href": "quick-reference-guides/json-quick-reference.html#introduction",
    "title": "JSON in Python: A Quick Reference",
    "section": "",
    "text": "Working with JSON (JavaScript Object Notation) data in Python is a crucial skill for any developer. JSON is a lightweight, human-readable data format that is widely used for data exchange between web servers, web applications, and mobile apps. In Python, the json module provides a simple and efficient way to work with JSON data. Whether you’re building a web scraper, a data analysis tool, or a web application, understanding how to work with JSON in Python is essential.\nThis quick reference guide provides a quick reference guide to the most commonly used functions and methods for working with JSON data in Python. From converting Python objects to JSON and parsing JSON data, to handling errors and best practices, this quick reference guide covers it all. Whether you’re a beginner or an experienced developer, this quick reference guide will help you master the basics of working with JSON in Python."
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html#json-basics",
    "href": "quick-reference-guides/json-quick-reference.html#json-basics",
    "title": "JSON in Python: A Quick Reference",
    "section": "JSON Basics",
    "text": "JSON Basics\n\nJSON stands for JavaScript Object Notation\nIt’s a lightweight data interchange format\nIt’s easy to read and write, and is widely supported"
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html#creating-json-data",
    "href": "quick-reference-guides/json-quick-reference.html#creating-json-data",
    "title": "JSON in Python: A Quick Reference",
    "section": "Creating JSON Data",
    "text": "Creating JSON Data\n\nUse the json module: import json\nConvert a Python object to JSON: json.dumps(obj)\nExample: json.dumps({'name': 'John', 'age': 30})"
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html#parsing-json-data",
    "href": "quick-reference-guides/json-quick-reference.html#parsing-json-data",
    "title": "JSON in Python: A Quick Reference",
    "section": "Parsing JSON Data",
    "text": "Parsing JSON Data\n\nUse the json module: import json\nConvert JSON to a Python object: json.loads(json_string)\nExample: json.loads('{\"name\": \"John\", \"age\": 30}')"
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html#working-with-json-data",
    "href": "quick-reference-guides/json-quick-reference.html#working-with-json-data",
    "title": "JSON in Python: A Quick Reference",
    "section": "Working with JSON Data",
    "text": "Working with JSON Data\n\nConvert a Python dictionary to JSON: json.dumps({'name': 'John', 'age': 30})\nConvert JSON to a Python dictionary: json.loads('{\"name\": \"John\", \"age\": 30}')\nUse the json.load() function to load JSON from a file: with open('data.json') as f: json.load(f)\nUse the json.dump() function to dump a Python object to a file: with open('data.json', 'w') as f: json.dump({'name': 'John', 'age': 30}, f)"
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html#error-handling",
    "href": "quick-reference-guides/json-quick-reference.html#error-handling",
    "title": "JSON in Python: A Quick Reference",
    "section": "Error Handling",
    "text": "Error Handling\n\nUse the json.JSONDecodeError exception to catch errors when parsing JSON: try: json.loads(json_string) except json.JSONDecodeError: print(\"Invalid JSON\")\nUse the json.JSONEncodeError exception to catch errors when encoding JSON: try: json.dumps(obj) except json.JSONEncodeError: print(\"Invalid object\")"
  },
  {
    "objectID": "quick-reference-guides/json-quick-reference.html#best-practices",
    "href": "quick-reference-guides/json-quick-reference.html#best-practices",
    "title": "JSON in Python: A Quick Reference",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse the json module to work with JSON data\nUse the dumps() function to convert a Python object to JSON\nUse the loads() function to convert JSON to a Python object\nUse the load() and dump() functions to work with JSON files\nUse try-except blocks to handle errors when working with JSON data"
  },
  {
    "objectID": "worksheets/homework-1.html",
    "href": "worksheets/homework-1.html",
    "title": "Python Fundamentals Review Worksheet",
    "section": "",
    "text": "Objective:\nThis worksheet is designed to review the basics of Python programming, including creating variables, simple if-then statements, basic loops, using print, and handling input. Answer the following questions to the best of your ability.\n\nCreating Variables\n\nWrite a Python statement to create a variable named name and assign it the value \"Alice\".\n\n::: {#1215643a .cell} {.python .cell-code}  # Your code here :::\nCreating Variables\n\nCreate two variables: age with the value 30 and height with the value 5.9.\n\n::: {#0d86b237 .cell} {.python .cell-code}  # Your code here :::\nSimple If-Then Statement\n\nWrite an if-then statement that prints “You are an adult.” if the variable age is greater than or equal to 18.\n\n::: {#757de86c .cell} ``` {.python .cell-code} age = 20 # You can change this value for testing\n# Your code here ``` :::\nSimple If-Then Statement\n\nWrite an if-then statement that checks if a number stored in the variable number is positive. If it is, print “The number is positive.”\n\n::: {#061ab886 .cell} ``` {.python .cell-code} number = 5 # You can change this value for testing\n# Your code here ``` :::\nBasic Loops\n\nWrite a for loop that prints the numbers from 1 to 5.\n\n::: {#e81f2a56 .cell} {.python .cell-code}  # Your code here :::\nBasic Loops\n\nWrite a while loop that prints the numbers from 1 to 5.\n\n::: {#9de12043 .cell} ``` {.python .cell-code} i = 1\n# Your code here ``` :::\nCombining Variables and If-Then Statements\n\nCreate a variable temperature with the value 75. Write an if-then statement that prints “It’s warm outside.” if temperature is greater than or equal to 70.\n\n::: {#d0134388 .cell} ``` {.python .cell-code} temperature = 75\n# Your code here ``` :::\nUsing Loops with If-Then Statements\n\nWrite a for loop that iterates over the list numbers = [1, 2, 3, 4, 5] and prints each number only if it is even.\n\n::: {#1280e9f0 .cell} ``` {.python .cell-code} numbers = [1, 2, 3, 4, 5]\n# Your code here ``` :::\nModifying Variables in Loops\n\nWrite a while loop that starts with a variable count set to 0 and increments count by 1 each iteration. The loop should stop when count reaches 10, and the value of count should be printed at the end.\n\n::: {#34b3f007 .cell} ``` {.python .cell-code} count = 0\n# Your code here ``` :::\nNested Loops\n\nWrite a nested loop that prints a 3x3 grid of asterisks (*).\n\n\n# Your code here\n\nUsing print Function\n\nWrite a Python program that prints “Hello, World!” to the console.\n\n\n# Your code here\n\nUsing input Function\n\nWrite a Python program that prompts the user for their name and then prints a greeting message with their name. For example, if the user inputs “Alice”, the program should print “Hello, Alice!”.\n\n\n# Your code here\n\n\n\n\nAdditional Notes:\n\nMake sure to test your code by running it in a Python environment.\nFeel free to modify variable values to test different scenarios.\nPractice writing clean and readable code by using proper indentation and comments.\n\n\n\nConclusion:\nThis worksheet provides a fundamental review of Python programming basics. Ensure you understand each concept thoroughly before moving on to more advanced topics."
  },
  {
    "objectID": "slides/11_debugging.html",
    "href": "slides/11_debugging.html",
    "title": "Debugging Adventures: The Quest for Bug-Free Code",
    "section": "",
    "text": "Debugging: Fixing errors found during testing.\n\nTesting vs. Debugging\n\n\n\n\n\n\n\n\nAspect\nTesting\nDebugging\n\n\n\n\nPurpose\nIdentify errors and issues in the code\nFix errors and issues found during testing\n\n\nProcess\nRunning the code with various inputs to check for correctness\nAnalyzing and modifying the code to fix errors\n\n\nTiming\nPerformed before debugging\nPerformed after testing detects issues\n\n\nOutcome\nA report of failures, errors, or issues\nCorrected code without the detected issues\n\n\nTools\nTesting frameworks like unittest, pytest, doctest\nDebuggers, print statements, IDE debugging tools\n\n\n\n\n\nWhy Debugging is Important\n\nEnsure Code Correctness: Debugging helps find and fix errors, ensuring the code works as intended.\nImprove Software Quality: Identifying and resolving bugs leads to more reliable and robust software.\nOptimize Performance: Debugging can help identify performance bottlenecks and inefficiencies.\nEnhance Maintainability: Code that is thoroughly debugged is easier to maintain and extend.\nFacilitate Learning: Debugging helps programmers understand how their code works and how different parts interact.\n\n\n\nMethods of Debugging in Python\n\nStep/Trace Through Code\nInspect Objects\nPython Debugger (pdb)\n\n\n\nStep/Trace Through Code\n\nprint(): Output variable values and program flow to the console.\nx = 10\nprint(f\"x: {x}\")\nlogging(): Use the logging module for more advanced logging capabilities.\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogging.info(f\"x: {x}\")\n\n\n\nInspect Objects\n\ntype(): Check the type of an object.\nx = 10\nprint(type(x))\ninspect module: Provides several useful functions to help get information about live objects.\nimport inspect\nprint(inspect.getmembers(x))\n\n\n\nPython Debugger (pdb)\n\n\n\nbreakpoint(): Built-in function to pause execution and enter debugging mode.\ndef example_function():\n    x = 10\n    breakpoint()\n    y = x + 5\n    return y\n\nexample_function()\n\n\n\ntraceback: Useful for getting detailed error reports when other methods are not enough.\nimport traceback\n\ntry:\n    1 / 0\nexcept ZeroDivisionError:\n    traceback.print_exc()\n\n\n\n\n\nExample: Using print() for Debugging\ndef add(a, b):\n    print(f\"a: {a}, b: {b}\")\n    return a + b\n\nresult = add(5, 3)\nprint(f\"Result: {result}\")\n\n\nExample: Using logging for Debugging\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\ndef add(a, b):\n    logging.debug(f\"a: {a}, b: {b}\")\n    return a + b\n\nresult = add(5, 3)\nlogging.debug(f\"Result: {result}\")\n\n\nExample: Using pdb for Debugging\ndef add(a, b):\n    x = a\n    y = b\n    breakpoint()\n    return x + y\n\nresult = add(5, 3)\n\n\nBest Practices for Debugging\n\nStart Small: Debug small sections of code before moving to larger sections.\nUse Version Control: Keep track of changes to easily revert to a working state.\nWrite Tests: Combine debugging with writing tests to catch errors early.\nUnderstand the Error: Take time to understand the error message and stack trace.\nStay Organized: Keep debugging sessions focused and organized.\n\n\n\nSummary\n\nDebugging is the process of fixing errors found during testing.\nVarious methods of debugging in Python:\n\nStep/Trace through code with print() and logging()\nInspect objects with type() and inspect\nUse Python debugger pdb with breakpoint() and traceback\n\n\n\n\nNext Sessions\n\nAdd documentation\nDistribution methods"
  },
  {
    "objectID": "slides/03_managing_data.html",
    "href": "slides/03_managing_data.html",
    "title": "Data Handling Adventures: CSV and SQL Edition",
    "section": "",
    "text": "Today\n\nLearn how to manage weather data using CSV files\nUnderstand how to use SQL to store and retrieve weather data\nPractice reading, writing, and processing data with pandas and SQLite\n\n\n\nOpenWeatherMap API (Homework)\n\nNavigate OpenWeatherMap API endpoints.\nCustomise requests with parameters.\nUnderstand API response formats.\nHandle common API errors.\n\n\n\nProject Overview\n\nWeb app displays weather trends.\nUses OpenWeatherMap API data.\nShows current and forecast weather.\nLocation selection and unit switch.\nHandles API errors gracefully.\n\n\n\nSetup Project\n\nCreate GitHub repository.\nClone repository locally.\nStructure project folders.\nCreate Python environment.\nInstall dependencies via requirements.txt.\n\n\n\nBreakout Room Activity\n\nSetup Project Folder and Environment\n\n\n\nManaging Data with CSV Files\n\nReading data from a CSV file\nProcessing data by converting temperature from Kelvin to Celsius\nWriting data to a new CSV file\n\n\n\nRead data\nimport pandas as pd\n\ndf = pd.read_csv('data/raw/weather_data.csv')\ndf\n\n\nProcessing data\ndef convert_temp_kelvin_to_celsius(temp_k):\n    return temp_k - 273.15\n\ndf['Temperature (C)'] = df['Temperature (K)'].apply(convert_temp_kelvin_to_celsius)\ndf.drop(columns=['Temperature (K)'], inplace=True)\ndf\n\n\nSaving data\ndf.to_csv('data/processed/processed_weather_data.csv', index=False)\n\n\nManaging Data with SQL\n\nCreating a SQLite database and table\nInserting data into the table\nQuerying data from the table\n\n\n\nCreate database\nimport sqlite3\n\nconn = sqlite3.connect('data/weather_data.db')\ncursor = conn.cursor()\n\ncursor.execute('''\n    CREATE TABLE IF NOT EXISTS weather (\n        location TEXT,\n        temperature_c REAL,\n        humidity INTEGER,\n        weather_description TEXT\n    )\n''')\nconn.commit()\n\n\ninserting into table\nfor index, row in df.iterrows():\n    cursor.execute('''\n        INSERT INTO weather (location, temperature_c, humidity, weather_description)\n        VALUES (?, ?, ?, ?)\n    ''', (row['Location'], row['Temperature (C)'], row['Humidity (%)'], row['Weather']))\nconn.commit()\n\n\nQuerying form table\ncursor.execute('SELECT * FROM weather')\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n\ndf_sql = pd.DataFrame(rows, columns=['Location', 'Temperature (C)', 'Humidity (%)', 'Weather'])\ndf_sql\n\n\nCombining CSV and SQL Data Management\n\nReading additional weather data from a CSV file\nInserting data into the SQLite table\nQuerying combined data from the SQLite table\n\n\n\nCode snippet:\nadditional_data = pd.read_csv('data/raw/additional_weather_data.csv')\nfor index, row in additional_data.iterrows():\n    cursor.execute('''\n        INSERT INTO weather (location, temperature_c, humidity, weather_description)\n        VALUES (?, ?, ?, ?)\n    ''', (row['Location'], row['Temperature (C)'], row['Humidity (%)'], row['Weather']))\nconn.commit()\n\n\nVerify\ncursor.execute('SELECT * FROM weather')\ncombined_rows = cursor.fetchall()\ndf_combined = pd.DataFrame(combined_rows, columns=['Location', 'Temperature (C)', 'Humidity (%)', 'Weather'])\ndf_combined\n\n\nHomework\n\nComplete Understanding the Weather Dashboard Project: WeatherVista worksheet\nWrite fetch_data.py and test_fetch_data.py\nPractice reading and writing data to CSV files with different weather datasets\nExplore additional SQL queries to retrieve specific subsets of the weather data\n\n\n\nSummary\n\nmanage weather data using CSV files and SQL.\npractice reading, writing, and processing data with pandas and SQLite\ncombined both techniques to manage our weather data effectively.\n\n\n\nNext Session\n\nwe will focus on basic data visualisation with Matplotlib."
  },
  {
    "objectID": "slides/01_welcome.html",
    "href": "slides/01_welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Today\n– Introduce the course and project goals. – Set up the development environment.\nActivities: – Overview of the weather dashboard project. – Install Python, Jupyter, and necessary libraries. – Basic Git commands: clone, commit, push.\n\n\nIntroduction to the Course\n\nWelcome and course overview\nIntroduction to the WeatherVista project\n\n\n\nDemo of Completed WeatherVista Dashboard (20 minutes) • Show the completed dashboard\n\nHighlight key features and functionalities\n\n\n\nSetting Up Development Environment (30 minutes)\n\nWalkthrough installation of Python, Jupyter, and necessary libraries\nSet up GitHub/GitLab repository\n\n\n\nIntroduction to Git\n\nBasic Git commands: clone, commit, push\nDemonstrate cloning the project repository\n\n\n\nCreating Project Directory Structure (20 minutes)\n\nCreate directories for data, scripts, notebooks, and tests\nBrief explanation of the purpose of each directory\n\n\n\nBreakout Room Activity\n\nStudents work in small groups to set up their project structure\nInstructors available for assistance\n\n\n\nQ&A and Wrap-Up\n\nAddress any questions about setup and project structure\nHomework: Research the OpenWeatherMap API and sign up for an API key"
  },
  {
    "objectID": "slides/07_dashboards.html",
    "href": "slides/07_dashboards.html",
    "title": "Weather Dashboards: From Notebooks to GUIs",
    "section": "",
    "text": "What is a Dashboard?\n\nDefinition: A visual display of the most important information needed to achieve one or more objectives.\nBenefits:\n\nConsolidated view of key metrics\nFaster decision-making\nImproved communication\n\nTypes:\n\nOperational (real-time monitoring)\nStrategic (long-term trends)\nAnalytical (in-depth exploration)\n\n\n\n\nDashboards in Python\n\nWhy Python?\n\nVersatile language\nRich ecosystem of data science and visualisation libraries\nEasy to integrate with other tools\n\nPopular Libraries:\n\nMatplotlib (basic plotting)\nSeaborn (statistical plots)\nPlotly (interactive plots)\nBokeh (web-based dashboards)\nPanel (high-level dashboarding)\nTkinter (GUI library)\n\n\n\n\nJupyter Widgets (ipywidgets)\n\n\n\nWhat are they? Interactive elements for Jupyter Notebooks.\nExamples:\n\nSliders\nDropdowns\nText boxes\nButtons\n\nBenefits:\n\nEasy to create and use\nEnable exploration of data within the notebook\nGreat for prototyping dashboard ideas\n\n\n\n\nCommon Widgets\nIntSlider: ipywidgets.IntSlider()\nFloatSlider: ipywidgets.FloatSlider()\nIntRangeSlider: ipywidgets.IntRangeSlider()\nFloatRangeSlider: ipywidgets.FloatRangeSlider()\nDropdown: ipywidgets.Dropdown(options=['Option 1', 'Option 2'])\nText: ipywidgets.Text()\nButton: ipywidgets.Button(description='Click Me')\n\n\n\n\n\nFrom Notebook to GUI: Why?\n\nLimitations of Notebooks:\n\nNot ideal for sharing with non-technical users\nLimited customisation options\n\nBenefits of GUIs:\n\nMore user-friendly interface\nCan be packaged into standalone applications\nGreater control over the look and feel\n\n\n\n\nTkinter: A Python GUI Library\n\n\n\nIntroduction: Standard Python GUI toolkit.\nFeatures:\n\nCross-platform (Windows, macOS, Linux)\nRelatively easy to learn\nGood for simple to moderately complex applications\n\nAlternatives:\n\nPyQt, wxPython (more powerful, but steeper learning curve)\n\n\n\n\nEssential Tkinter Widgets\n\nLabel (tk.Label): Displays text or images\nButton (tk.Button): Triggers actions when clicked\nEntry (tk.Entry): Single-line text input\nText (tk.Text): Multi-line text input\nCombobox (ttk.Combobox): Selection from a list\nFrame (tk.Frame): Container for organising widgets\n\n\n\n\n\n\nDesign Considerations for Your Weather Dashboard\n\nAudience: Who will be using it? (Students, instructors, the public?)\nData Sources: Where will you get the weather data?\nKey Metrics: What information is most important to display?\nLayout: How will you arrange the elements for optimal usability?\nInteractivity: What kind of user controls will you provide?\n\n\n\nLive Coding Demo - Jupyter Notebook\n\nWalkthrough: Build a basic weather dashboard in a Jupyter Notebook using ipywidgets.\nHighlight: How to create and connect widgets to data visualisations.\nKeep it Simple: Focus on the core concepts, not every possible feature.\n\n\n\nMigration to Tkinter (Overview)\n\nExplain: The process of converting the notebook code into a Tkinter GUI.\nChallenges:\n\nAdapting notebook layout to GUI elements\nManaging event-driven programming\n\nTips:\n\nPlan the GUI layout carefully\nUse functions to organise code\nTest frequently\n\n\n\n\nLive Coding Demo - tkinter\n\nWalkthrough: Build a basic weather dashboard in tkinter\nHighlight: How to create and connect widgets to data visualisations.\nKeep it Simple: Focus on the core concepts, not every possible feature.\n\n\n\nConclusion and Next Steps\n\nSummarise: Key takeaways from the session.\nHomework/Challenge:\n\nAdd more plots to the dashboard, both in the notebook, and GUI\nExplore additional Tkinter features or alternative GUI libraries"
  },
  {
    "objectID": "slides/06_web_scraping.html",
    "href": "slides/06_web_scraping.html",
    "title": "Mastering Web Scraping and APIs in Python",
    "section": "",
    "text": "What is Web Scraping?\nWeb scraping is an automated method used to extract large amounts of data from websites. It involves fetching the web page and extracting specific information according to the user’s needs. How Does It Work?\nWeb scraping tools (like BeautifulSoup, Scrapy) parse the HTML of web pages. They identify and extract the data elements based on HTML tags, attributes, or other patterns. Common Uses of Web Scraping:\nWeb scraping is a powerful tool for extracting data from websites, enabling a wide range of applications from market analysis to sentiment analysis. Understanding its definition and common uses will help you identify potential use cases for your projects.\n\n\nData Collection for ….\n\n\n\nResearch Data: Collecting data on climate patterns from weather websites for environmental research.\nUse Case: Researchers can gather data from multiple sources to analyze trends and make predictions.\nPrice Monitoring: Scraping e-commerce sites to track product prices.\nUse Case: Businesses and consumers can monitor price changes and market trends to make informed decisions.\nMarket Analysis: Extracting customer reviews and ratings from review websites.\nUse Case: Companies can analyze feedback to improve products and services.\nContent Aggregation: Collecting news articles from various news websites.\nUse Case: News aggregators can compile articles from different sources to provide a comprehensive news feed.\n\n\n\nLead Generation Example: Scraping contact information from business directories.\nUse Case: Sales and marketing teams can build lists of potential clients for outreach.\nJob Listings: Extracting job postings from job boards.\nUse Case: Job seekers can use aggregated job listings to find employment opportunities more efficiently.\nSentiment Analysis: Collecting social media posts or comments for sentiment analysis.\nUse Case: Businesses can gauge public opinion and sentiment towards their brand or products.\n\n\nHave you ever needed data from a website that wasn’t available for download? How would web scraping help in that situation?\n\n\n\n\nWhat is an API?\nAn Application Programming Interface (API) is a set of rules and protocols for building and interacting with software applications. APIs define methods and data formats that applications use to communicate with each other.\nAPIs are fundamental to modern software development, enabling seamless integration and communication between different software systems. Understanding APIs’ definition and common uses will help you leverage them effectively in your projects.\n\n\nKey Characteristics of APIs:\n\nInteroperability: APIs enable different software systems to work together.\nAbstraction: APIs provide a layer of abstraction, allowing developers to use functionality without needing to understand the underlying code.\nReusability: APIs allow developers to reuse existing functionalities, speeding up development and promoting consistency.\n\n\n\nCommon Uses of APIs:\n\n\n\nWeb APIs: Using the OpenWeatherMap API to get weather data.\nUse Case: Integrating real-time weather updates into an application.\nSocial Media APIs: Twitter API, Facebook Graph API.\nUse Case: Posting updates to social media platforms, retrieving user data, or accessing social media analytics.\nPayment Gateway APIs: PayPal API, Stripe API.\nUse Case: Facilitating online payments, managing transactions, and integrating payment solutions into e-commerce websites.\n\n\n\nMaps and Geolocation APIs: Google Maps API, Mapbox API.\nUse Case: Embedding maps into websites or apps, providing directions, and geocoding addresses.\nData Access APIs: Public APIs from government agencies or open data sources.\nUse Case: Accessing datasets for research, analytics, or application development.\nCommunication APIs: Twilio API.\nUse Case: Sending SMS, making phone calls, or managing video calls programmatically. contents…\n\n\nCan you think of any applications or services you use daily that might be powered by APIs?\n\n\n\n\nWebscraping vs APIs\n\n\n\n\n\n\n\n\nFeature\nWeb Scraping\nAPIs\n\n\n\n\nMethod of Access\nExtracts HTML content from web pages\nSends requests to a server for structured data\n\n\nData Structure\nOften unstructured or semi-structured\nWell-structured (JSON/XML)\n\n\nReliability\nLess reliable, can break if HTML changes\nMore stable, with documented endpoints\n\n\nEase of Use\nMore complex setup, especially for dynamic content\nEasier with documentation and SDKs\n\n\n\n\nCan you think of a scenario where web scraping might be more beneficial than using an API, and vice versa?\n\n\n\nLegal Aspects and Compliance:\n\nTerms of Service:\n\nAdherence: Always review and adhere to the terms of service (ToS) of the websites and APIs you are accessing. Violating ToS can lead to legal action.\nExample: Some sites explicitly prohibit scraping in their ToS.\n\nIntellectual Property:\n\nRespect: Do not scrape content that is protected by copyright without permission. This includes images, articles, and other copyrighted materials.\nFair Use: Understand the limitations and rights under the fair use doctrine.\n\nData Protection Laws:\n\nRegulations: Comply with data protection laws such as GDPR (General Data Protection Regulation) in the EU, and CCPA (California Consumer Privacy Act) in the USA.\nUser Rights: Ensure that any personal data collected is handled according to the rights of the data subjects, including the right to access and delete their data.\n\nAPIs Compliance:\n\nRate Limits: Abide by the rate limits and usage policies set by API providers to avoid getting banned.\nAttribution: Provide proper attribution if required by the API provider.\n\n\n\n\nEthical Considerations:\n\nRespect for Website Owners:\n\nPermission: Always check if the website allows scraping. Look for a robots.txt file to understand the site’s policy.\nRespect Load: Avoid placing excessive load on a website by making too many requests in a short period. Use delays and rate limiting.\n\nData Privacy:\n\nSensitive Data: Be cautious when scraping personal or sensitive information. Ensure compliance with data protection regulations.\nUser Consent: If scraping user-generated content, consider the privacy and consent of the individuals who created the content.\n\nTransparency:\n\nDisclosure: Be transparent about your data collection methods if asked. Avoid deceptive practices like masking the scraper as a regular user.\n\n\n\nCan you think of an example where web scraping could potentially be unethical or illegal? What steps would you take to ensure compliance?\n\n\n\nTools for Using APIs\nWhat is the Requests Library?\n\nDefinition: Requests is a simple and elegant HTTP library for Python, designed to make HTTP requests easy and more human-friendly.\nInstallation: Can be easily installed using pip install requests.\n\nKey Features:\n\nEase of Use: Simple syntax for making HTTP requests, such as GET, POST, PUT, DELETE, etc.\nRobustness: Handles various complexities like sessions, cookies, and headers seamlessly.\nExtensibility: Supports adding custom authentication and handling redirects.\n\n\n\nBasic Example of Using Requests:**\nimport requests\n\nresponse = requests.get('https://api.openweathermap.org/data/2.5/weather?q=London&appid=YOUR_API_KEY')\nprint(response.status_code)  # Outputs: 200 (if successful)\nprint(response.text)  # Outputs the response content as a string\n\n\nJSON\nJSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.\nCommonly used format for API responses because of its simplicity and readability.\n\n\nParsing JSON Responses:\ndata = response.json()  # Converts response content to a Python dictionary\nprint(data)\n\n\nExtracting Specific Data:\n# Extracting temperature information from the JSON response\ntemperature = data['main']['temp']\nprint(f\"The temperature in London is {temperature}K\")\n\n\nLive Coding: Introduction to BeautifulSoup:\nBeautifulSoup is a Python library used for parsing HTML and XML documents. It creates a parse tree for parsed pages that can be used to extract data easily.\npip install beautifulsoup4\npip install requests\n\n\nLive Coding: Setting Up the Environment:\n\nImport Necessary Libraries:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n\nLive Coding: Fetching a Web Page:\nurl = 'http://example.com'\nresponse = requests.get(url)\nhtml_content = response.content\n\n\nLive Coding: Creating a BeautifulSoup Object:\nsoup = BeautifulSoup(html_content, 'html.parser')\n\n\nLive Coding: Understanding HTML Structure:\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Example Domain&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Example Domain&lt;/h1&gt;\n    &lt;p&gt;This domain is for use in illustrative examples in documents.&lt;/p&gt;\n    &lt;a href=\"https://www.iana.org/domains/example\"&gt;More information...&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nLive Coding: Extracting Data:\n\nFinding Elements by Tag Name:\ntitle = soup.title\nprint(title.text)  # Outputs: Example Domain\nFinding Elements by CSS Class:\nparagraph = soup.find('p')\nprint(paragraph.text)  # Outputs: This domain is for use in illustrative examples in documents.\nFinding Elements by Attributes:\nlink = soup.find('a', href=True)\nprint(link['href'])  # Outputs: https://www.iana.org/domains/example\n\n\n\nLive Coding: Navigating the Parse Tree:\nbody = soup.body\nprint(body.h1.text)  # Outputs: Example Domain\nprint(body.p.text)   # Outputs: This domain is for use in illustrative examples in documents.\n\nWhat challenges might you face when scraping data from more complex web pages?\n\n\n\nRecap of Web Scraping\nWeb scraping is the automated process of extracting data from websites. It involves fetching the HTML of a web page and parsing it to extract the desired information.\n\nRequests Library: Used to send HTTP requests to retrieve the HTML content of web pages.\nKey Functions: requests.get(url), handling response status codes, and accessing response content.\nBeautifulSoup Library: Used to parse HTML and XML documents, making it easier to navigate and extract data.\nKey Functions: BeautifulSoup(html_content, 'html.parser'), finding elements (find, find_all), and navigating the parse tree.\nFetching Web Page Content:\n\nimport requests\nresponse = requests.get('http://example.com')\nhtml_content = response.content\n\nParsing HTML Content:\n\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_content, 'html.parser')\n\nExtracting Data:\n\ntitle = soup.title.text\nprint(title)  # Outputs: Example Domain\n\n\nQuick Quiz:\n\nQuestion 1: What is the main purpose of the Requests library in web scraping?\nQuestion 2: How do you parse HTML content using BeautifulSoup?\nQuestion 3: What method would you use to find all paragraph (&lt;p&gt;) tags in a web page using BeautifulSoup?\n\n\n\nQuick Quiz:\n\nQuestion 1: What is the main purpose of the Requests library in web scraping?\n\nAnswer: To send HTTP requests and retrieve HTML content of web pages.\n\nQuestion 2: How do you parse HTML content using BeautifulSoup?\n\nAnswer: By creating a BeautifulSoup object with the HTML content and specifying a parser (html.parser).\n\nQuestion 3: What method would you use to find all paragraph (&lt;p&gt;) tags in a web page using BeautifulSoup?\n\nAnswer: soup.find_all('p')\n\n\n\n\nRecap of Using APIs\nAn API (Application Programming Interface) is a set of rules and protocols that allows different software applications to communicate with each other. APIs facilitate the exchange of data and functionality between systems.\n\nRequests Library:\nPurpose: Used to send HTTP requests to interact with APIs and retrieve data.\nKey Functions: requests.get(url), requests.post(url, data), handling response status codes, and accessing response content.\nJSON Module:\nPurpose: Used to parse and manipulate JSON data, which is a common format for API responses.\nKey Functions: response.json(), json.loads(), and json.dumps().\n\n\nKey Steps in Using APIs:\n\nSending HTTP Requests:\nimport requests\nresponse = requests.get('https://api.openweathermap.org/data/2.5/weather?q=London&appid=YOUR_API_KEY')\nprint(response.status_code)  # Outputs: 200 (if successful)\nprint(response.text)  # Outputs the response content as a string\nHandling JSON Responses:\ndata = response.json()  # Converts response content to a Python dictionary\nprint(data)\nExtracting Specific Data:\ntemperature = data['main']['temp']\nprint(f\"The temperature in London is {temperature}K\")\n\n\n\n\nQuick Quiz:\n\nQuestion 1: What is the main purpose of the Requests library when working with APIs?\nQuestion 2: How do you parse a JSON response from an API using the Requests library?\nQuestion 3: How would you extract a specific value from a JSON response, such as the temperature in a weather API response?\n\n\n\nQuick Quiz:\n\nQuestion 1: What is the main purpose of the Requests library when working with APIs?\n\nAnswer: To send HTTP requests and retrieve data from APIs.\n\nQuestion 2: How do you parse a JSON response from an API using the Requests library?\n\nAnswer: By using the response.json() method to convert the JSON response to a Python dictionary.\n\nQuestion 3: How would you extract a specific value from a JSON response, such as the temperature in a weather API response?\n\nAnswer: By accessing the relevant key in the dictionary, e.g., data['main']['temp'].\n\n\n\n\nAdvanced Web Scraping: Scrapy:\n\nWhat is Scrapy?\n\nScrapy is a powerful and fast web scraping and web crawling framework for Python.\nIt is designed for large-scale web scraping projects, providing a robust set of features for extracting data from websites.\n\nKey Features:\n\nSpider Framework: Allows the creation of spiders that define how a site should be scraped, including following links and extracting data.\nItem Pipeline: Provides a way to process the extracted data, such as cleaning or storing it.\nBuilt-in Support for Handling Requests and Responses: Makes it easy to manage requests, handle responses, and follow links.\n\n\n\n\nScrapy Example:\nimport scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = \"quotes\"\n    start_urls = [\n        'http://quotes.toscrape.com/page/1/',\n    ]\n\n    def parse(self, response):\n        for quote in response.css('div.quote'):\n            yield {\n                'text': quote.css('span.text::text').get(),\n                'author': quote.css('span small::text').get(),\n                'tags': quote.css('div.tags a.tag::text').getall(),\n            }\n\n\nAdvanced Web Scraping: Selenium:\nSelenium is a web testing framework that can be used for automating browser actions. It is particularly useful for scraping dynamic content that requires interaction with the web page.\n\nKey Features:\n\nBrowser Automation: Allows you to control a web browser programmatically, including clicking buttons, filling forms, and navigating pages.\nHandling JavaScript: Can execute JavaScript and wait for elements to load, making it ideal for scraping content that loads dynamically.\n\n\n\n\nSelenium Example:\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome(executable_path='/path/to/chromedriver')\ndriver.get('http://quotes.toscrape.com/js/')\n\nquotes = driver.find_elements_by_class_name('quote')\nfor quote in quotes:\n    print(quote.text)\n\ndriver.quit()\n\n\nChallenges of Dynamic Content:\n\nJavaScript-Rendered Pages: Some web pages load content dynamically using JavaScript, making it difficult to scrape with basic tools like Requests and BeautifulSoup.\nAsynchronous Loading: Content might load at different times, requiring the scraper to wait for elements to be fully loaded.\n\n\n\nSolutions: Using Selenium:**\nSelenium can wait for specific elements to appear before extracting data, ensuring that all dynamic content is fully loaded.\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver.get('http://quotes.toscrape.com/js/')\ntry:\n    element = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.CLASS_NAME, \"quote\"))\n    )\n    quotes = driver.find_elements_by_class_name('quote')\n    for quote in quotes:\n        print(quote.text)\nfinally:\n    driver.quit()\n\n\nSolution: Using Scrapy with Splash:\nSplash is a headless browser designed for web scraping that can be integrated with Scrapy to render JavaScript content.\nimport scrapy\nfrom scrapy_splash import SplashRequest\n\nclass QuotesSpider(scrapy.Spider):\n    name = \"quotes\"\n    start_urls = [\n        'http://quotes.toscrape.com/js/',\n    ]\n\n    def start_requests(self):\n        for url in self.start_urls:\n            yield SplashRequest(url, self.parse, args={'wait': 1})\n\n    def parse(self, response):\n        for quote in response.css('div.quote'):\n            yield {\n                'text': quote.css('span.text::text').get(),\n                'author': quote.css('span small::text').get(),\n                'tags': quote.css('div.tags a.tag::text').getall(),\n            }\n\n\nWhen to use each:\nWhen would you use Scrapy versus Selenium for a web scraping project? What are the benefits and drawbacks of each?\nUse Scrapy for:\n\nLarge-scale web scraping operations with low power consumption and high speed requirements.\nScenarios where data pipeline and scalability are crucial.\n\nUse Selenium for:\n\nComplex web scraping operations with JavaScript-heavy websites.\nScenarios where handling multiple data formats is necessary.\n\n\n\nAdvanced API Usage: Working with OAuth for Authentication:\nOAuth (Open Authorization) is an open standard for access delegation commonly used as a way to grant websites or applications limited access to a user’s information without exposing passwords.\n\nPurpose: Ensures secure access to APIs by using tokens instead of passwords.\n\n\nHow OAuth Works:\n\nProcess:\n\nClient Registration: Register your application with the API provider to receive a client ID and client secret.\nAuthorization Request: Redirect the user to the API provider’s authorization server to grant permission.\nAuthorization Grant: If the user approves, the authorization server provides an authorization grant to the client.\nAccess Token Request: The client exchanges the authorization grant for an access token.\nAccessing Resources: Use the access token to access protected resources from the API.\n\n\n\n\n\noAuth Example\nimport requests\nfrom requests_oauthlib import OAuth2Session\n\n# Client credentials\nclient_id = 'YOUR_CLIENT_ID'\nclient_secret = 'YOUR_CLIENT_SECRET'\nredirect_uri = 'YOUR_REDIRECT_URI'\n\n# OAuth2 endpoints\nauthorization_base_url = 'https://api.provider.com/oauth/authorize'\ntoken_url = 'https://api.provider.com/oauth/token'\n\n# Step 1: User Authorization\noauth = OAuth2Session(client_id, redirect_uri=redirect_uri)\nauthorization_url, state = oauth.authorization_url(authorization_base_url)\nprint(f'Please go to {authorization_url} and authorize access.')\n\n# Step 2: Get the authorization verifier code from the callback url\nredirect_response = input('Paste the full redirect URL here:')\n\n# Step 3: Fetch the access token\ntoken = oauth.fetch_token(token_url, authorization_response=redirect_response, client_secret=client_secret)\nprint(f'Access token: {token}')\n\n# Step 4: Access protected resources\nresponse = oauth.get('https://api.provider.com/protected/resource')\nprint(response.json())\n\n\nRate Limiting and Pagination:\nRate limiting is a technique used by API providers to control the amount of incoming requests from a user or application to prevent abuse and ensure fair usage.\n\nHandling Rate Limits:\n\nCheck Headers: Most APIs return rate limit information in response headers (e.g., X-Rate-Limit-Remaining, Retry-After).\nImplement Delays: Use sleep functions to pause the execution of your code when the limit is reached.\n\n\n\n\nRate Limit Example:\nimport time\n\nresponse = requests.get('https://api.example.com/data')\nif response.status_code == 429:  # Too Many Requests\n    retry_after = int(response.headers.get('Retry-After', 60))\n    print(f'Rate limit exceeded. Retrying after {retry_after} seconds.')\n    time.sleep(retry_after)\n    response = requests.get('https://api.example.com/data')\n\n\nPagination:\nPagination is a technique used to divide a large set of results into manageable pages, making it easier to retrieve and process data.\n\nHandling Pagination:\n\nAPI Documentation: Follow the API’s documentation to understand how pagination is implemented (e.g., page, limit, offset parameters).\nIterate Through Pages: Implement a loop to fetch all pages until no more data is available.\n\n\n\n\nPagination Example:\nall_data = []\npage = 1\nwhile True:\n    response = requests.get(f'https://api.example.com/data?page={page}&limit=100')\n    data = response.json()\n    if not data:\n        break\n    all_data.extend(data)\n    page += 1\nprint(f'Total records fetched: {len(all_data)}')\n\n\nTest your understanding?\nWhy is OAuth important for API security? How would you handle rate limits in your projects?\n\n\nTest your understanding?\nOAuth is crucial for API security as it allows secure, delegated access to resources without exposing user credentials. By using OAuth, applications can request access via tokens with limited permissions, reducing the risk of over-privileged access. Tokens are short-lived and revocable, providing a dynamic and secure way to manage access.\nTo handle rate limits in projects, implement strategies that monitor and control API request frequency. Use exponential backoff for retries and maintain an internal counter to track requests. Employ techniques like the token bucket algorithm to ensure requests are spread out over time, adhering to API rate limits and preventing disruptions."
  },
  {
    "objectID": "slides/08_workflow.html",
    "href": "slides/08_workflow.html",
    "title": "From Prototyping to Production: Converting Jupyter Notebooks to Python Scripts",
    "section": "",
    "text": "No one-size-fits-all solution; depends on project requirements, team size, data complexity, collaboration needs, and development speed.\nUse notebooks for exploratory data analysis and prototyping.\nUse Python scripts for long-term development and production code.\nHybrid approaches combine benefits of both."
  },
  {
    "objectID": "slides/08_workflow.html#usage",
    "href": "slides/08_workflow.html#usage",
    "title": "From Prototyping to Production: Converting Jupyter Notebooks to Python Scripts",
    "section": "Usage",
    "text": "Usage\nfrom your_project import your_function\nresult = your_function()\nprint(result)"
  },
  {
    "objectID": "slides/08_workflow.html#features",
    "href": "slides/08_workflow.html#features",
    "title": "From Prototyping to Production: Converting Jupyter Notebooks to Python Scripts",
    "section": "Features",
    "text": "Features\n\nFeature 1\nFeature 2"
  },
  {
    "objectID": "slides/08_workflow.html#license",
    "href": "slides/08_workflow.html#license",
    "title": "From Prototyping to Production: Converting Jupyter Notebooks to Python Scripts",
    "section": "License",
    "text": "License\nMIT ```"
  },
  {
    "objectID": "project-names.html",
    "href": "project-names.html",
    "title": "Weather Dashboard Project: WeatherVista (天气景观 - Tiānqì jǐngguān)",
    "section": "",
    "text": "Project\nHere are translations and checks for each suggested project name to ensure they are appropriate and not offensive in Chinese:\n\nTranslation and Cultural Check\n\nWeatherVista (天气景观 - Tiānqì jǐngguān)\n\nTranslation: “Weather Landscape” or “Weather View”\nCultural Check: This is a neutral and descriptive term in Chinese.\n\nWeatherInsight (天气洞察 - Tiānqì dòngchá)\n\nTranslation: “Weather Insight”\nCultural Check: This is a straightforward and appropriate term in Chinese.\n\nClimaView (气候视图 - Qìhòu shìtú)\n\nTranslation: “Climate View”\nCultural Check: This is an accurate and non-offensive term in Chinese.\n\nWeatherPro (天气专家 - Tiānqì zhuānjiā)\n\nTranslation: “Weather Expert”\nCultural Check: This is a positive and professional term in Chinese.\n\nSkyScope (天际范围 - Tiānjì fànwéi)\n\nTranslation: “Sky Scope” or “Sky Range”\nCultural Check: This is a neutral term in Chinese, though “范围” (scope) might be less commonly associated with weather.\n\n\n\n\nRecommendations\nBased on the translations and cultural checks, here are the most suitable names:\n\nWeatherVista (天气景观 - Tiānqì jǐngguān)\nWeatherInsight (天气洞察 - Tiānqì dòngchá)\nClimaView (气候视图 - Qìhòu shìtú)\nWeatherPro (天气专家 - Tiānqì zhuānjiā)\n\nThese names translate well into Chinese and are not offensive. They also effectively convey the purpose of the project."
  },
  {
    "objectID": "notebooks.html",
    "href": "notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nWeatherVista Project - REVIEW Session 2: Data Review and Fetching\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - REVIEW Session 3: Basic Data Visualisation with Matplotlib and Pandas\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 1: Fetching Data from the OpenWeatherMap API\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 2: Data Management with CSV and SQL\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 3: Basic Data Visualisation with Matplotlib and Pandas\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 5: Web Scraping and Using Additional APIs\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 6b: Creating a GUI with Tkinter\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 6c: GUI with Tkinter\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 7: Writing and Running Tests with doctest\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeatherVista Project - Session 8: Documentating project with mkdocs and doctest\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/06a_dashboard_nb.html",
    "href": "notebooks/06a_dashboard_nb.html",
    "title": "WeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets",
    "section": "",
    "text": "Learn how to create a graphical user interface (GUI) for the WeatherVista project.\nUnderstand the basics of Jupyter Widgets building notebook applications.\nExplore using Jupyter Widgets for interactive elements in Jupyter notebooks."
  },
  {
    "objectID": "notebooks/06a_dashboard_nb.html#objectives",
    "href": "notebooks/06a_dashboard_nb.html#objectives",
    "title": "WeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets",
    "section": "",
    "text": "Learn how to create a graphical user interface (GUI) for the WeatherVista project.\nUnderstand the basics of Jupyter Widgets building notebook applications.\nExplore using Jupyter Widgets for interactive elements in Jupyter notebooks."
  },
  {
    "objectID": "notebooks/06a_dashboard_nb.html#setting-up-the-environment",
    "href": "notebooks/06a_dashboard_nb.html#setting-up-the-environment",
    "title": "WeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets",
    "section": "Setting Up the Environment",
    "text": "Setting Up the Environment\nBegin by installing the ipywidgets library and enabling the widgets extension in Jupyter Notebooks to ensure a seamless interactive experience. This step sets the foundation for integrating dynamic controls into your notebooks.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom IPython.display import display\nimport weather_plots as wp \nimport matplotlib.patches as patches\nfrom fetch_data import fetch_weather_data\nfrom process_data import process_weather_data\nfrom utils import determine_weather"
  },
  {
    "objectID": "notebooks/06a_dashboard_nb.html#fetching-weather-data",
    "href": "notebooks/06a_dashboard_nb.html#fetching-weather-data",
    "title": "WeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets",
    "section": "Fetching Weather Data",
    "text": "Fetching Weather Data\nUtilize APIs such as OpenWeatherMap to fetch current weather data. This step involves making HTTP requests and processing the received JSON data to extract relevant weather information.\n\napi_key = 'd0de46031ad7410d0c72c6063690e1d0'  # Replace with your OpenWeatherMap API key\ncity = 'Sydney'  # Default city for demonstration\ncurrent_data, forecast_data = fetch_weather_data(api_key, city)\ncurrent_df, hourly_df, daily_df = process_weather_data(current_data, forecast_data)"
  },
  {
    "objectID": "notebooks/06a_dashboard_nb.html#determining-weather-conditions",
    "href": "notebooks/06a_dashboard_nb.html#determining-weather-conditions",
    "title": "WeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets",
    "section": "Determining Weather Conditions",
    "text": "Determining Weather Conditions\nAnalyze the fetched data to determine specific weather conditions like temperature, humidity, and wind speed. This processing helps in displaying meaningful information and creating visualizations.\n\ndaily_df['Weather'] = daily_df.apply(determine_weather, axis=1, args=(25, 15, 80))\n\n\n5. Creating Dropdown Widget\nCreate a dropdown widget using ipywidgets to allow users to select different cities or weather parameters. This widget will enable dynamic interaction and updates based on user input.\n\ncity_dropdown = widgets.Dropdown(\n    options=['Sydney', 'New York', 'London', 'Beijing'],\n    value='Sydney',\n    description='City:'\n)\ndisplay(city_dropdown)\n\n\n\n6. Creating Update Button\nAdd an update button to trigger the fetching and processing of weather data based on the selected dropdown options. This button will help refresh the displayed information without re-running the entire notebook.\n\nupdate_button = widgets.Button(\n    description='Update Weather',\n    button_style='success'\n)\ndisplay(update_button)\n\n\n\n7. Output Area for Plots\nDesignate an output area using ipywidgets where the weather plots will be displayed. This area will dynamically update as the user interacts with the dropdown and update button.\n\noutput = widgets.Output()\ndisplay(output)\n\n\n\n8. Updating Weather Data and Plots\nImplement functionality to update the weather data and corresponding plots when the user changes the dropdown selection or clicks the update button. This ensures the displayed data is always current and relevant.\n\ndef update_weather(b):\n    city = city_dropdown.value\n    current_data, forecast_data = fetch_weather_data(api_key, city)\n    current_df, hourly_df, daily_df = process_weather_data(current_data, forecast_data)\n    daily_df['Weather'] = daily_df.apply(determine_weather, axis=1, args=(25, 15, 80))\n    \n    with output:\n        output.clear_output()\n        fig, axs = plt.subplots(1, 3, figsize=(15, 4))\n        fig.tight_layout(pad=5.0)\n\n        # Generate plots\n        wp.create_forecast_card(axs[0], daily_df.iloc[0]['Date'], daily_df.iloc[0]['Max Temperature (C)'], daily_df.iloc[0]['Min Temperature (C)'], daily_df.iloc[0]['Weather'])\n        wp.plot_scatter(hourly_df, 'Temperature (C)', 'Wind Speed (m/s)', axs[1], title=\"Wind Speed vs Temperature\")\n        wp.plot_min_max(daily_df, 'Date', 'Min Temperature (C)', 'Max Temperature (C)', axs[2], title=\"Daily Min/Max Temperature\")\n\n        plt.show()"
  },
  {
    "objectID": "notebooks/06a_dashboard_nb.html#add-events-and-display-initial-dashboard",
    "href": "notebooks/06a_dashboard_nb.html#add-events-and-display-initial-dashboard",
    "title": "WeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets",
    "section": "Add events and display initial dashboard",
    "text": "Add events and display initial dashboard\nBind the created widgets to events and display the initial dashboard layout. This setup will prepare the interface for user interactions, showing the initial state of the weather data and plots.\n\nupdate_button.on_click(update_weather)\ndisplay(city_dropdown, update_button, output)\nupdate_weather(None)"
  },
  {
    "objectID": "notebooks/06a_dashboard_nb.html#combining-everything",
    "href": "notebooks/06a_dashboard_nb.html#combining-everything",
    "title": "WeatherVista Project - Session 6: Creating a GUI with Jupyter Widgets",
    "section": "Combining Everything",
    "text": "Combining Everything\nIntegrate all components into a cohesive interactive dashboard that updates weather data and visualizations in real-time based on user input. This final step brings together the dropdown, update button, and output area to create a functional and dynamic weather dashboard.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom IPython.display import display\nimport weather_plots as wp  # Assuming this contains your plotting functions\nimport matplotlib.patches as patches\nfrom fetch_data import fetch_weather_data\nfrom process_data import process_weather_data\n\ndef determine_weather(row, sunny_threshold, rainy_min_temp_threshold, rainy_humidity_threshold):\n    if row['Max Temperature (C)'] &gt; sunny_threshold:\n        return 'Sunny'\n    elif row['Min Temperature (C)'] &lt; rainy_min_temp_threshold and row['Max Humidity (%)'] &gt; rainy_humidity_threshold:\n        return 'Rainy'\n    else:\n        return 'Partly Cloudy'\n\n# Dropdown for city selection\ncity_dropdown = widgets.Dropdown(\n    options=['Sydney', 'New York', 'London', 'Beijing'],\n    value='Sydney',\n    description='City:'\n)\n\n# Button to fetch and update weather data\nupdate_button = widgets.Button(\n    description='Update Weather',\n    button_style='success'\n)\n\noutput = widgets.Output()\n\n# Function to update weather data and plots\ndef update_weather(b):\n    city = city_dropdown.value\n    api_key = 'd0de46031ad7410d0c72c6063690e1d0'  # Replace with your OpenWeatherMap API key\n    current_data, forecast_data = fetch_weather_data(api_key, city)\n    current_df, hourly_df, daily_df = process_weather_data(current_data, forecast_data)\n    daily_df['Weather'] = daily_df.apply(determine_weather, axis=1, args=(25, 15, 80))\n\n    with output:\n        output.clear_output()\n        fig, axs = plt.subplots(1, 3, figsize=(15, 4))\n        fig.tight_layout(pad=5.0)\n\n        # Generate plots\n        wp.create_forecast_card(axs[0], daily_df.iloc[0]['Date'], daily_df.iloc[0]['Max Temperature (C)'], daily_df.iloc[0]['Min Temperature (C)'], daily_df.iloc[0]['Weather'])\n        wp.plot_scatter(hourly_df, 'Temperature (C)', 'Wind Speed (m/s)', axs[1], title=\"Wind Speed vs Temperature\")\n        wp.plot_min_max(daily_df, 'Date', 'Min Temperature (C)', 'Max Temperature (C)', axs[2], title=\"Daily Min/Max Temperature\")\n\n        plt.show()\n\nupdate_button.on_click(update_weather)\ndisplay(city_dropdown, update_button, output)\nupdate_weather(None)"
  },
  {
    "objectID": "notebooks/04_advanced_vis.html",
    "href": "notebooks/04_advanced_vis.html",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "",
    "text": "Learn how to create advanced visualisations using subplots and grids.\nUnderstand how to combine multiple plots into a single figure.\nCustomise the layout and presentation of complex visualisations."
  },
  {
    "objectID": "notebooks/04_advanced_vis.html#objectives",
    "href": "notebooks/04_advanced_vis.html#objectives",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "",
    "text": "Learn how to create advanced visualisations using subplots and grids.\nUnderstand how to combine multiple plots into a single figure.\nCustomise the layout and presentation of complex visualisations."
  },
  {
    "objectID": "notebooks/04_advanced_vis.html#introduction-to-advanced-visualisation",
    "href": "notebooks/04_advanced_vis.html#introduction-to-advanced-visualisation",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "1. Introduction to Advanced Visualisation",
    "text": "1. Introduction to Advanced Visualisation\nAdvanced visualisations can provide more insights by combining multiple plots into a single figure, allowing for easier comparison and analysis.\n\nImport Required Libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np"
  },
  {
    "objectID": "notebooks/04_advanced_vis.html#reading-data",
    "href": "notebooks/04_advanced_vis.html#reading-data",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "2. Reading Data",
    "text": "2. Reading Data\nWe’ll start by reading the processed weather data from the CSV file.\n\ndf = pd.read_csv('processed_weather_data.csv')\ndf['Datetime'] = pd.to_datetime(df['Datetime'])\ndf.head()"
  },
  {
    "objectID": "notebooks/04_advanced_vis.html#creating-subplots",
    "href": "notebooks/04_advanced_vis.html#creating-subplots",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "3. Creating Subplots",
    "text": "3. Creating Subplots\nSubplots allow us to create multiple plots within a single figure.\n\nCreating a 2x2 Grid of Plots\nWe’ll create a 2x2 grid of plots to visualise different aspects of the weather data.\n\n# Select every 6th datetime value for x-ticks\nx_ticks = df['Datetime'][::6]\n\nfig, axs = plt.subplots(2, 2, figsize=(14, 10))\n\n# Plot 1: Line plot for Temperature over Time\naxs[0, 0].plot(df['Datetime'], df['Temperature (C)'], marker='o')\naxs[0, 0].set_title('Temperature over Time')\naxs[0, 0].set_xlabel('Datetime')\naxs[0, 0].set_ylabel('Temperature (°C)')\naxs[0, 0].set_xticks(x_ticks)\naxs[0, 0].tick_params(axis='x', rotation=45)\n\n# Add line of best fit for Temperature over Time\ns = np.polyfit(df['Datetime'].astype(np.int64) // 10**9, df['Temperature (C)'], 1)\np = np.poly1d(s)\naxs[0, 0].plot(df['Datetime'], p(df['Datetime'].astype(np.int64) // 10**9), \"r--\")\n\n# Plot 2: Bar plot for Humidity over Time\naxs[0, 1].bar(df['Datetime'], df['Humidity (%)'], color='skyblue')\naxs[0, 1].set_title('Humidity over Time')\naxs[0, 1].set_xlabel('Datetime')\naxs[0, 1].set_ylabel('Humidity (%)')\naxs[0, 1].set_xticks(x_ticks)\naxs[0, 1].tick_params(axis='x', rotation=45)\n\n# Plot 3: Pie chart for Weather Description\nweather_counts = df['Weather'].value_counts()\naxs[1, 0].pie(weather_counts, labels=weather_counts.index, autopct='%1.1f%%', startangle=140)\naxs[1, 0].set_title('Weather Description Distribution')\naxs[1, 0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Plot 4: Scatter plot for Temperature vs. Wind Speed\naxs[1, 1].scatter(df['Temperature (C)'], df['Wind Speed (m/s)'], c='g', marker='o')\naxs[1, 1].set_title('Temperature vs. Wind Speed')\naxs[1, 1].set_xlabel('Temperature (°C)')\naxs[1, 1].set_ylabel('Wind Speed (m/s)')\naxs[1, 1].grid(True)\n\n# Add line of best fit for Temperature vs. Wind Speed\ns = np.polyfit(df['Temperature (C)'], df['Wind Speed (m/s)'], 1)\np = np.poly1d(s)\naxs[1, 1].plot(df['Temperature (C)'], p(df['Temperature (C)']), \"r--\")\n\n# Adjust layout\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/04_advanced_vis.html#customising-subplots",
    "href": "notebooks/04_advanced_vis.html#customising-subplots",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "4. Customising Subplots",
    "text": "4. Customising Subplots\nCustomising subplots can enhance their readability and presentation.\n\nAdding Annotations\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(df['Datetime'], df['Temperature (C)'], marker='o')\nax.set_title('Temperature over Time')\nax.set_xlabel('Datetime')\nax.set_ylabel('Temperature (°C)')\nax.set_xticks(x_ticks)\nax.tick_params(axis='x', rotation=45)\nax.grid(True)\n\n# Annotate the highest temperature\nmax_temp = df['Temperature (C)'].max()\nmax_temp_time = df.loc[df['Temperature (C)'] == max_temp, 'Datetime'].iloc[0]\nax.annotate(f'Max Temp: {max_temp:.2f}°C', xy=(max_temp_time, max_temp), \n             xytext=(max_temp_time, max_temp+2), \n             arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.show()\n\n\n\nCustomising Colors and Styles\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(df['Datetime'], df['Temperature (C)'], marker='o', linestyle='--', color='b')\nax.set_title('Temperature over Time', fontsize=14, fontweight='bold')\nax.set_xlabel('Datetime', fontsize=12)\nax.set_ylabel('Temperature (°C)', fontsize=12)\nax.set_xticks(x_ticks)\nax.tick_params(axis='x', rotation=45)\nax.grid(True, linestyle='--', linewidth=0.5)\n\nplt.show()"
  },
  {
    "objectID": "notebooks/04_advanced_vis.html#homework",
    "href": "notebooks/04_advanced_vis.html#homework",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "Homework",
    "text": "Homework\n\nCreate additional subplots to visualise other aspects of the weather data (e.g., wind speed, pressure).\nExperiment with different types of subplots and customisations to enhance the visualisations."
  },
  {
    "objectID": "notebooks/04_advanced_vis.html#summary",
    "href": "notebooks/04_advanced_vis.html#summary",
    "title": "WeatherVista Project - Session 4: Advanced Data Visualisation with Subplots and Grids",
    "section": "Summary",
    "text": "Summary\nIn this session, we learned how to visualise weather data using advanced techniques in Matplotlib. We created subplots and grids, combined multiple plots into a single figure, and customised these plots for better presentation."
  },
  {
    "objectID": "notebooks/06c_final_gui_dashboard.html",
    "href": "notebooks/06c_final_gui_dashboard.html",
    "title": "WeatherVista Project - Session 6c: GUI with Tkinter",
    "section": "",
    "text": "import tkinter as tk\nfrom tkinter import ttk\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport weather_plots as wp  # Assuming this contains your plotting functions\nfrom fetch_data import fetch_weather_data\nfrom process_data import process_weather_data\n\n# Function to determine weather description\ndef determine_weather(row, sunny_threshold, rainy_min_temp_threshold, rainy_humidity_threshold):\n    if row['Max Temperature (C)'] &gt; sunny_threshold:\n        return 'Sunny'\n    elif row['Min Temperature (C)'] &lt; rainy_min_temp_threshold and row['Max Humidity (%)'] &gt; rainy_humidity_threshold:\n        return 'Rainy'\n    else:\n        return 'Partly Cloudy'\n\n# Function to update weather data and plots\ndef update_weather():\n    city = city_var.get()\n    api_key = 'd0de46031ad7410d0c72c6063690e1d0'  # Replace with your OpenWeatherMap API key\n    current_data, forecast_data = fetch_weather_data(api_key, city)\n    current_df, hourly_df, daily_df = process_weather_data(current_data, forecast_data)\n    daily_df['Weather'] = daily_df.apply(determine_weather, axis=1, args=(25, 15, 80))\n\n    for widget in plot_frame.winfo_children():\n        widget.destroy()\n    \n    fig, axs = plt.subplots(1, 3, figsize=(15, 4))\n    fig.tight_layout(pad=5.0)\n\n    # Generate plots\n    wp.create_forecast_card(axs[0], daily_df.iloc[0]['Date'], daily_df.iloc[0]['Max Temperature (C)'], daily_df.iloc[0]['Min Temperature (C)'], daily_df.iloc[0]['Weather'])\n    wp.plot_scatter(hourly_df, 'Temperature (C)', 'Wind Speed (m/s)', axs[1], title=\"Wind Speed vs Temperature\")\n    wp.plot_min_max(daily_df, 'Date', 'Min Temperature (C)', 'Max Temperature (C)', axs[2], title=\"Daily Min/Max Temperature\")\n\n    canvas = FigureCanvasTkAgg(fig, master=plot_frame)\n    canvas.draw()\n    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)\n\n# Create the main Tkinter window\nroot = tk.Tk()\nroot.title(\"Weather Dashboard\")\n\n# Create a frame for the controls\ncontrol_frame = ttk.Frame(root, padding=\"10\")\ncontrol_frame.grid(row=0, column=0, sticky=(tk.W, tk.E))\n\n# Create a frame for the plots\nplot_frame = ttk.Frame(root, padding=\"10\")\nplot_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n\n# Dropdown for city selection\ncity_var = tk.StringVar(value='Sydney')\ncity_dropdown = ttk.Combobox(control_frame, textvariable=city_var, values=['Sydney', 'New York', 'London', 'Beijing'])\ncity_dropdown.grid(row=0, column=0, padx=5, pady=5)\n\n# Button to fetch and update weather data\nupdate_button = ttk.Button(control_frame, text=\"Update Weather\", command=update_weather)\nupdate_button.grid(row=0, column=1, padx=5, pady=5)\n\n# Configure row and column weights\nroot.grid_rowconfigure(1, weight=1)\nroot.grid_columnconfigure(0, weight=1)\nplot_frame.grid_rowconfigure(0, weight=1)\nplot_frame.grid_columnconfigure(0, weight=1)\n\n# Initialize the weather data\nupdate_weather()\n\n# Start the Tkinter event loop\nroot.mainloop()"
  },
  {
    "objectID": "notebooks/02_data_management.html",
    "href": "notebooks/02_data_management.html",
    "title": "WeatherVista Project - Session 2: Data Management with CSV and SQL",
    "section": "",
    "text": "Learn how to manage weather data using CSV files.\nUnderstand how to use SQL to store and retrieve weather data.\nPractice reading, writing, and processing data with pandas and SQLite."
  },
  {
    "objectID": "notebooks/02_data_management.html#objectives",
    "href": "notebooks/02_data_management.html#objectives",
    "title": "WeatherVista Project - Session 2: Data Management with CSV and SQL",
    "section": "",
    "text": "Learn how to manage weather data using CSV files.\nUnderstand how to use SQL to store and retrieve weather data.\nPractice reading, writing, and processing data with pandas and SQLite."
  },
  {
    "objectID": "notebooks/02_data_management.html#managing-data-with-csv-files",
    "href": "notebooks/02_data_management.html#managing-data-with-csv-files",
    "title": "WeatherVista Project - Session 2: Data Management with CSV and SQL",
    "section": "1. Managing Data with CSV Files",
    "text": "1. Managing Data with CSV Files\nCSV (Comma-Separated Values) is a simple and widely used format for storing tabular data.\n\nImport Required Libraries\n\nimport pandas as pd\n\n\n\nReading Data from a CSV File\nWe will read the weather data we saved in the previous session.\n\ndf = pd.read_csv('data/raw/weather_data.csv')\ndf\n\n\n\nProcessing Data\nLet’s process the data by converting the temperature from Kelvin to Celsius.\n\ndef convert_temp_kelvin_to_celsius(temp_k):\n    return temp_k - 273.15\n\ndf['Temperature (C)'] = df['Temperature (K)'].apply(convert_temp_kelvin_to_celsius)\ndf.drop(columns=['Temperature (K)'], inplace=True)\ndf\n\n\n\nWriting Data to a CSV File\nWe’ll save the processed data to a new CSV file.\n\ndf.to_csv('data/processed/processed_weather_data.csv', index=False)"
  },
  {
    "objectID": "notebooks/02_data_management.html#managing-data-with-sql",
    "href": "notebooks/02_data_management.html#managing-data-with-sql",
    "title": "WeatherVista Project - Session 2: Data Management with CSV and SQL",
    "section": "2. Managing Data with SQL",
    "text": "2. Managing Data with SQL\nSQL (Structured Query Language) is a powerful tool for managing and querying data stored in relational databases.\n\nImport Required Libraries\n\nimport sqlite3\n\n\n\nCreating a SQLite Database and Table\nWe’ll create a SQLite database and a table to store the weather data.\n\nconn = sqlite3.connect('data/weather_data.db')\ncursor = conn.cursor()\n\ncursor.execute('''\n    CREATE TABLE IF NOT EXISTS weather (\n        location TEXT,\n        temperature_c REAL,\n        humidity INTEGER,\n        weather_description TEXT\n    )\n''')\nconn.commit()\n\n\n\nInserting Data into the Table\nWe’ll insert the processed weather data into the SQLite table.\n\nfor index, row in df.iterrows():\n    cursor.execute('''\n        INSERT INTO weather (location, temperature_c, humidity, weather_description)\n        VALUES (?, ?, ?, ?)\n    ''', (row['Location'], row['Temperature (C)'], row['Humidity (%)'], row['Weather']))\nconn.commit()\n\n\n\nQuerying Data from the Table\nWe’ll query the data we just inserted into the SQLite table.\n\ncursor.execute('SELECT * FROM weather')\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n\n\n\nConverting SQL Query Results to DataFrame\nWe’ll convert the query results to a pandas DataFrame for easier manipulation and visualization.\n\ndf_sql = pd.DataFrame(rows, columns=['Location', 'Temperature (C)', 'Humidity (%)', 'Weather'])\ndf_sql"
  },
  {
    "objectID": "notebooks/02_data_management.html#combining-csv-and-sql-data-management",
    "href": "notebooks/02_data_management.html#combining-csv-and-sql-data-management",
    "title": "WeatherVista Project - Session 2: Data Management with CSV and SQL",
    "section": "3. Combining CSV and SQL Data Management",
    "text": "3. Combining CSV and SQL Data Management\nWe’ll demonstrate how to combine CSV and SQL data management techniques.\n\nReading Data from CSV and Inserting into SQL\nWe’ll read additional weather data from a CSV file and insert it into the SQLite table.\n\nadditional_data = pd.read_csv('data/raw/additional_weather_data.csv')\nfor index, row in additional_data.iterrows():\n    cursor.execute('''\n        INSERT INTO weather (location, temperature_c, humidity, weather_description)\n        VALUES (?, ?, ?, ?)\n    ''', (row['Location'], row['Temperature (C)'], row['Humidity (%)'], row['Weather']))\nconn.commit()\n\n\n\nQuerying Combined Data\nWe’ll query the combined data from the SQLite table.\n\ncursor.execute('SELECT * FROM weather')\ncombined_rows = cursor.fetchall()\ndf_combined = pd.DataFrame(combined_rows, columns=['Location', 'Temperature (C)', 'Humidity (%)', 'Weather'])\ndf_combined"
  },
  {
    "objectID": "notebooks/02_data_management.html#homework",
    "href": "notebooks/02_data_management.html#homework",
    "title": "WeatherVista Project - Session 2: Data Management with CSV and SQL",
    "section": "Homework",
    "text": "Homework\n\nPractice reading and writing data to CSV files with different weather datasets.\nExplore additional SQL queries to retrieve specific subsets of the weather data."
  },
  {
    "objectID": "notebooks/02_data_management.html#summary",
    "href": "notebooks/02_data_management.html#summary",
    "title": "WeatherVista Project - Session 2: Data Management with CSV and SQL",
    "section": "Summary",
    "text": "Summary\nIn this session, we learned how to manage weather data using CSV files and SQL. We practiced reading, writing, and processing data with pandas and SQLite, and we combined both techniques to manage our weather data effectively.\nNext session, we will focus on basic data visualization with Matplotlib."
  },
  {
    "objectID": "notebooks/03a_vis_review.html",
    "href": "notebooks/03a_vis_review.html",
    "title": "WeatherVista Project - REVIEW Session 3: Basic Data Visualisation with Matplotlib and Pandas",
    "section": "",
    "text": "Task\nRead and understand the provided Python code. Then, modify the code so that the minimum and maximum temperature values are displayed to two decimal places.\n\n\nSection 1: Load the Data\nThe script loads daily weather data from a CSV file into a DataFrame. The ‘Date’ column is converted to datetime format.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport random\n\n# Load the data\nfile_path = '/mnt/data/daily_weather_stats.csv'\ndf = pd.read_csv(file_path)\ndf['Date'] = pd.to_datetime(df['Date'])\n\n\nSection 2: Determine Weather Condition\nThis function determines the weather condition based on the temperature and humidity values for each day.\n\nThe weather is ‘Sunny’ if the maximum temperature is above 25°C.\nThe weather is ‘Rainy’ if the minimum temperature is below 15°C and the maximum humidity is above 80%.\nThe weather is ‘Partly Cloudy’ for other conditions.\n\nA new ‘Weather’ column is added to the DataFrame with the weather conditions.\ndef determine_weather(row):\n    if row['Max Temperature (C)'] &gt; 25:\n        return 'Sunny'\n    elif row['Min Temperature (C)'] &lt; 15 and row['Max Humidity (%)'] &gt; 80:\n        return 'Rainy'\n    else:\n        return 'Partly Cloudy'\n\n# Add a 'Weather' column to the dataframe\ndf['Weather'] = df.apply(determine_weather, axis=1)\n\n\nSection 3: Function to Create a Single Forecast Card\nThis function creates a forecast card for a given date, high temperature, low temperature, and weather condition.\n\nThe background color of the card is set based on the weather condition using a rectangle patch.\nThe function hides the axis, displays the date, high and low temperatures, and weather condition as text on the card.\n\ndef create_forecast_card(ax, date, high_temp, low_temp, weather):\n    # Background color based on weather\n    if weather == 'Sunny':\n        bg_color = 'gold'\n    elif weather == 'Partly Cloudy':\n        bg_color = 'lightgrey'\n    elif weather == 'Rainy':\n        bg_color = 'lightblue'\n    \n    # Create a rectangle patch for the background color\n    rect = patches.Rectangle((0, 0), 1, 1, transform=ax.transAxes, color=bg_color, zorder=0)\n    ax.add_patch(rect)\n\n    ax.axis('off')  # Hide axes\n\n    # Display date\n    ax.text(0.5, 0.8, date.strftime('%Y-%m-%d'), fontsize=12, ha='center', va='center')\n\n    # Display high temperature\n    ax.text(0.5, 0.6, f'High: {high_temp}°C', fontsize=10, ha='center', va='center', color='red')\n\n    # Display low temperature\n    ax.text(0.5, 0.4, f'Low: {low_temp}°C', fontsize=10, ha='center', va='center', color='blue')\n\n    # Display weather condition\n    ax.text(0.5, 0.2, weather, fontsize=10, ha='center', va='center')\n\n\nSection 4: Display a Single Forecast Card\nA random row from the DataFrame is selected to display the forecast card.\n# Select a random row from the dataframe\nrandom_row = df.sample(n=1).iloc[0]\n\n# Create a plot for the forecast card\nfig, ax = plt.subplots(figsize=(3, 4))\n\ncreate_forecast_card(ax, random_row['Date'], random_row['Max Temperature (C)'], random_row['Min Temperature (C)'], random_row['Weather'])\n\nplt.tight_layout()\nplt.show()\n\nTask\nModify the code so that the minimum and maximum temperature values are displayed to two decimal places.\n\n\nHint\nTo format numbers to two decimal places in Python, you can use string formatting. For example:\nformatted_number = f\"{number:.2f}\"\nUse this hint to modify the relevant part of the code to ensure the temperature values are displayed with two decimal places.\n\nSubmit your modified code and a brief explanation of the changes you made."
  },
  {
    "objectID": "notebooks/02a_data_review.html",
    "href": "notebooks/02a_data_review.html",
    "title": "WeatherVista Project - REVIEW Session 2: Data Review and Fetching",
    "section": "",
    "text": "Objectives\n\nLearn how to fetch weather forecast data using the OpenWeatherMap API.\nUnderstand how to process and save the fetched data.\nReview the structure and content of the raw and processed data.\nCalculate daily weather statistics from forecast data.\n\n\n\n1. Introduction to Data Fetching\nIn this session, we will fetch weather forecast data from the OpenWeatherMap API and process it for analysis.\n\nImport Required Libraries\n\nimport requests\nimport pandas as pd\n\n\n\nSet Up API Key and City\nReplace the placeholder with your own OpenWeatherMap API key.\n\n# Replace with your OpenWeatherMap API key\nAPI_KEY = 'YOUR_API_KEY'\ncity = 'London'\n\n\n\n\n2. Fetching Weather Forecast Data\nWe will define a function to fetch the 5-day weather forecast data for a specified city.\n\nDefine Function to Fetch Data\n\n# Function to fetch data from the given URL and return JSON\ndef fetch_data(url):\n    response = requests.get(url)\n    data = response.json()\n    if response.status_code != 200:\n        print(f\"Error fetching data: {data}\")\n        return None\n    return data\n\n\n\nFetch Data\n\n# Fetch current weather data\ncurrent_url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}'\ncurrent_data = fetch_data(current_url)\n\n# Fetch 5-day forecast data\nforecast_url = f'http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}'\nforecast_data = fetch_data(forecast_url)\n\n\n\n\n3. Processing and Saving Data\nWe will process the fetched data to extract relevant information and save it in CSV format.\n\nParse Weather Data\n\n# Function to parse a single weather entry into a dictionary\ndef parse_weather(entry):\n    if entry is None:\n        return None\n    return {\n        'Datetime': pd.to_datetime(entry['dt'], unit='s'),\n        'Temperature (C)': entry['main']['temp'] - 273.15,\n        'Humidity (%)': entry['main']['humidity'],\n        'Wind Speed (m/s)': entry['wind']['speed'],\n        'Weather': entry['weather'][0]['description']\n    }\n\n\n\nExtract and Process Data\n\n# Process current weather data\ncurrent_weather = parse_weather(current_data)\n\n# Process forecast weather data\nforecast_weather = [parse_weather(entry) for entry in forecast_data['list']]\n\n\n\nSave Data to CSV\n\n# Function to save a list of dictionaries to a CSV file\ndef save_to_csv(data, filename):\n    if data is None or not data:\n        print(f\"No data to save for {filename}\")\n        return\n    df = pd.DataFrame(data)\n    df.to_csv(filename, index=False)\n    print(f\"{filename} saved\")\n\n# Save current weather data to CSV\nsave_to_csv([current_weather], '../data/processed/current_weather_data.csv')\n\n# Save forecast weather data to CSV\nsave_to_csv(forecast_weather, '../data/processed/hourly_weather_data.csv')\n\n\n\nCalculate Daily Statistics\n\n# Function to calculate daily min and max stats from forecast data\ndef calculate_daily_stats(forecast_data):\n    if forecast_data is None or not forecast_data:\n        return None\n    \n    # Convert the list of dictionaries to a DataFrame\n    df_forecast = pd.DataFrame(forecast_data)\n    \n    # Extract the date from the 'Datetime' column and create a new 'Date' column\n    df_forecast['Date'] = df_forecast['Datetime'].dt.date\n\n    # Group the data by the 'Date' column and calculate the min and max for each group\n    daily_stats = df_forecast.groupby('Date').agg({\n        'Temperature (C)': ['min', 'max'],\n        'Humidity (%)': ['min', 'max'],\n        'Wind Speed (m/s)': ['min', 'max']\n    })\n\n    # Flatten the MultiIndex columns\n    daily_stats.columns = ['Min Temperature (C)', 'Max Temperature (C)', \n                           'Min Humidity (%)', 'Max Humidity (%)', \n                           'Min Wind Speed (m/s)', 'Max Wind Speed (m/s)']\n    \n    # Reset the index to turn the 'Date' back into a column\n    daily_stats.reset_index(inplace=True)\n    \n    return daily_stats\n\n# Calculate and save daily statistics to CSV\ndaily_stats = calculate_daily_stats(forecast_weather)\nsave_to_csv(daily_stats, '../data/processed/daily_weather_stats.csv')\n\n\n\n\n4. Reviewing the Data\nWe will review the structure and content of the raw and processed data to ensure it is correctly fetched and processed.\n\nDisplay the First Few Rows of Raw Data\n\ndf_raw = pd.read_csv('../data/processed/hourly_weather_data.csv')\ndf_raw.head()\n\n\n\nDisplay the First Few Rows of Processed Data\n\ndf_processed = pd.read_csv('../data/processed/daily_weather_stats.csv')\ndf_processed.head()\n\n\n\n\nHomework\n\nExperiment with fetching data for different cities and review the structure of the fetched data.\nExtend the data processing to include additional weather parameters if available.\n\n\n\nSummary\nIn this session, we learned how to fetch weather forecast data using the OpenWeatherMap API. We processed the data to convert temperature values from Kelvin to Celsius and saved both raw and processed data to CSV files. We also calculated daily weather statistics, preparing us for further analysis and visualization in upcoming sessions."
  },
  {
    "objectID": "worksheets.html",
    "href": "worksheets.html",
    "title": "Worksheets",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nPython Fundamentals Review Worksheet\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding the Weather Dashboard Project: WeatherVista\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]