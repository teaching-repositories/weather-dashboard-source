### Python Fundamentals Review Worksheet

#### Objective:
This worksheet is designed to review the basics of Python programming, including creating variables, simple if-then statements, basic loops, using print, and handling input. Answer the following questions to the best of your ability.


1. **Creating Variables**
    - Write a Python statement to create a variable named `name` and assign it the value `"Alice"`.

    ```{python}
    # Your code here
    ```

2. **Creating Variables**
    - Create two variables: `age` with the value `30` and `height` with the value `5.9`.

    ```{python}
    # Your code here
    ```

3. **Simple If-Then Statement**
    - Write an if-then statement that prints "You are an adult." if the variable `age` is greater than or equal to 18.

    ```{python}
    age = 20  # You can change this value for testing

    # Your code here
    ```

4. **Simple If-Then Statement**
    - Write an if-then statement that checks if a number stored in the variable `number` is positive. If it is, print "The number is positive."

    ```{python}
    number = 5  # You can change this value for testing

    # Your code here
    ```

5. **Basic Loops**
    - Write a for loop that prints the numbers from 1 to 5.

    ```{python}
    # Your code here
    ```

6. **Basic Loops**
    - Write a while loop that prints the numbers from 1 to 5.

    ```{python}
    i = 1

    # Your code here
    ```

7. **Combining Variables and If-Then Statements**
    - Create a variable `temperature` with the value `75`. Write an if-then statement that prints "It's warm outside." if `temperature` is greater than or equal to 70.

    ```{python}
    temperature = 75

    # Your code here
    ```

8. **Using Loops with If-Then Statements**
    - Write a for loop that iterates over the list `numbers = [1, 2, 3, 4, 5]` and prints each number only if it is even.

    ```{python}
    numbers = [1, 2, 3, 4, 5]

    # Your code here
    ```

9. **Modifying Variables in Loops**
    - Write a while loop that starts with a variable `count` set to 0 and increments `count` by 1 each iteration. The loop should stop when `count` reaches 10, and the value of `count` should be printed at the end.

    ```{python}
    count = 0

    # Your code here
    ```

10. **Nested Loops**
    - Write a nested loop that prints a 3x3 grid of asterisks (`*`).

    ```{python}
    # Your code here
    ```

11. **Using `print` Function**
    - Write a Python program that prints "Hello, World!" to the console.

    ```{python}
    # Your code here
    ```

12. **Using `input` Function**
    - Write a Python program that prompts the user for their name and then prints a greeting message with their name. For example, if the user inputs "Alice", the program should print "Hello, Alice!".

    ```{python}
    # Your code here
    ```


#### Additional Notes:
- Make sure to test your code by running it in a Python environment.
- Feel free to modify variable values to test different scenarios.
- Practice writing clean and readable code by using proper indentation and comments.


#### Conclusion:
This worksheet provides a fundamental review of Python programming basics. Ensure you understand each concept thoroughly before moving on to more advanced topics.